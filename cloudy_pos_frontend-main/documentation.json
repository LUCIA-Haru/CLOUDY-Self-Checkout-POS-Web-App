{
    "pipes": [],
    "interfaces": [
        {
            "name": "CancelResponse",
            "id": "interface-CancelResponse-597cb2876841e0f9eb1181ad24d9f64a55b1887825ef3e6ee5117bdb50ff6c01f50971c1086569f6a9c00a351279a86a10db98364d163a725423056f2b34033b",
            "file": "src/app/customer/apiService/checkoutService/checkout.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CartService } from '../cartService/cart.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { isTokenExpired } from 'app/utils/jwt.utils';\r\nimport { Router } from '@angular/router';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\n\r\ninterface CheckoutResponse {\r\n  status: string;\r\n  message: string;\r\n  data: CheckoutData;\r\n}\r\ninterface CancelResponse {\r\n  status: string;\r\n  message: string;\r\n  data: string; // Based on your backend signature: ApiResponseWrapper<String>\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  private baseUrl = '/v1';\r\n  private couponUrl = '/coupon';\r\n  private TAX_RATE = 0.3;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private cartService: CartService,\r\n    private toastService: ToastService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n  // loyalty points\r\n  async fetchLoyaltyPoints(username: string): Promise<number | null> {\r\n    const token = this.authService.getToken();\r\n    if (!token || isTokenExpired(token)) {\r\n      console.warn('No valid token for loyalty points fetch.');\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      const points = await firstValueFrom(\r\n        this.http.get<number>(\r\n          `${this.baseUrl}/purchase/${username}/loyaltyPoints`,\r\n        ),\r\n      );\r\n      return points || 0;\r\n    } catch (error: any) {\r\n      if (error.status === 404) {\r\n        return null; // No loyalty points record exists\r\n      }\r\n      console.error('Error fetching loyalty points:', error);\r\n      this.toastService.showError('Failed to fetch loyalty points');\r\n      throw error; // Re-throw for other errors\r\n    }\r\n  }\r\n  // coupon\r\n  async applyCoupon(couponCode: string, totalAmount: number): Promise<number> {\r\n    if (!couponCode) {\r\n      this.toastService.showError('Please enter a valid coupon code');\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      const response: any = await firstValueFrom(\r\n        this.http.post(`${this.couponUrl}/apply`, {\r\n          couponCode,\r\n          totalAmount: totalAmount.toString(),\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        const discount = parseFloat(response.data) || 0;\r\n        return discount;\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to apply coupon',\r\n        );\r\n        return 0;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error applying coupon:', error);\r\n      this.toastService.showError('Failed to apply coupon');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // validate loyalty points\r\n  validateLoyaltyPoints(\r\n    points: number,\r\n    availablePoints: number | null,\r\n  ): number {\r\n    const effectivePoints = availablePoints ?? 0; // Treat null as 0\r\n    if (points > effectivePoints) {\r\n      this.toastService.showWarning('Insufficient loyalty points.');\r\n      return 0;\r\n    } else if (points < 0) {\r\n      this.toastService.showWarning('Points cannot be negative.');\r\n      return 0;\r\n    } else {\r\n      return points; // 1 point = 1 USD\r\n    }\r\n  }\r\n  // calculate totals\r\n  calculateTotals(\r\n    originalTotal: number,\r\n    cartTotal: number,\r\n    couponDiscount: number,\r\n    loyaltyDiscount: number,\r\n  ): { taxAmount: number; grandTotal: number } {\r\n    const subtotal = cartTotal - couponDiscount - loyaltyDiscount;\r\n    const taxAmount = subtotal * this.TAX_RATE;\r\n    const grandTotal = subtotal + taxAmount;\r\n    return { taxAmount, grandTotal: grandTotal < 0 ? 0 : grandTotal };\r\n  }\r\n\r\n  // initiate purchase\r\n  async initiatePurchase(\r\n    username: string,\r\n    couponCode: string | null,\r\n    loyaltyPointsUsed: number,\r\n  ): Promise<CheckoutResponse> {\r\n    const cartItems = this.cartService.getCartItemsWithDiscounts();\r\n    const totals = this.cartService.calculateCartTotals();\r\n    const couponDiscount = couponCode\r\n      ? await this.applyCoupon(couponCode, totals.totalAmount)\r\n      : 0;\r\n    const availablePoints = await this.fetchLoyaltyPoints(username);\r\n    const loyaltyDiscount = this.validateLoyaltyPoints(\r\n      loyaltyPointsUsed,\r\n      availablePoints,\r\n    );\r\n    const { taxAmount, grandTotal } = this.calculateTotals(\r\n      totals.originalTotal,\r\n      totals.totalAmount,\r\n      couponDiscount,\r\n      loyaltyDiscount,\r\n    );\r\n\r\n    const checkoutData: CheckoutData = {\r\n      cartItems: cartItems.map((item) => ({\r\n        barcode: item.barcode,\r\n        name: item.productName,\r\n        price: item.price,\r\n        discountedPrice: item.discountedPrice,\r\n        quantity: item.cartQuantity,\r\n      })),\r\n      originalAmount: totals.originalTotal,\r\n      totalAmount: totals.totalAmount, // After discount\r\n      couponCode: couponCode || null,\r\n      couponDiscount: couponDiscount || 0,\r\n      loyaltyPointsUsed: loyaltyPointsUsed || 0,\r\n      loyaltyDiscount: loyaltyDiscount || 0,\r\n      taxAmount,\r\n      finalAmount: grandTotal,\r\n      username,\r\n    };\r\n    sessionStorage.setItem('checkoutData', JSON.stringify(checkoutData));\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      this.router.navigate(['/login']);\r\n      throw new Error('Token is missing. Please log in again.');\r\n    }\r\n    // document.cookie = `authToken=${token}; path=/; SameSite=Lax`;\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(\r\n          `${this.baseUrl}/purchase`,\r\n          checkoutData,\r\n        ),\r\n      );\r\n      if (response.status === 'success' && response.data?.approvalURl) {\r\n        this.toastService.showSuccess(\r\n          'Payment initiated! Redirecting to PayPal...',\r\n        );\r\n        sessionStorage.setItem(\r\n          'checkoutData',\r\n          JSON.stringify({\r\n            ...checkoutData,\r\n            purchaseId: response.data.purchaseId,\r\n            paymentId: response.data.paymentId,\r\n          }),\r\n        );\r\n        window.location.href = response.data.approvalURl; // Redirect to PayPal\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to initiate payment.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Checkout error:', error);\r\n      this.toastService.showError(\r\n        'Checkout failed: ' + (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n  // execute purchase payment\r\n  async executePurchasePayment(\r\n    checkoutData: CheckoutData,\r\n    purchaseId: number,\r\n    paymentId: string,\r\n    payerId: string,\r\n  ): Promise<CheckoutResponse> {\r\n    debugger;\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/payment/execute?paymentId=${paymentId}&PayerID=${payerId}`;\r\n    console.log('Executing payment with URL:', url); // Debug log\r\n    console.log('Payload:', checkoutData); // Debug log\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(url, checkoutData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Payment completed successfully!');\r\n        sessionStorage.removeItem('paymentDetails');\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Payment execution error:', error);\r\n      this.toastService.showError('Payment execution failed: ');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // handle paypal cancel\r\n  async cancelPurchase(purchaseId: number): Promise<CancelResponse> {\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/cancel`;\r\n    try {\r\n      const response: CancelResponse = await firstValueFrom(\r\n        this.http.post<CancelResponse>(\r\n          url,\r\n          {},\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          },\r\n        ),\r\n      );\r\n\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Purchase cancelled successfully!');\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to cancel purchase.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Cancel purchase error:', error);\r\n      this.toastService.showError(\r\n        'Failed to cancel purchase: ' +\r\n          (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItem",
            "id": "interface-CartItem-78ad6b4e2749ed77abe6c73458752f060a258b687fc86aecffe3797b6f1aff1f63156f9998bf53e164c3aad9c4e35a3526a44487c468d8c28b16d1e17ef6f233",
            "file": "src/app/customer/Model/checkOut.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CartItem {\r\n  barcode: string;\r\n  name: string;\r\n  price: number;\r\n  discountedPrice: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface CheckoutData {\r\n  cartItems: CartItem[];\r\n  totalAmount: number; // After discounts applied to items\r\n  originalAmount: number; // Before any discounts\r\n  couponCode?: string | null;\r\n  couponDiscount: number;\r\n  loyaltyPointsUsed: number;\r\n  loyaltyDiscount: number;\r\n  finalAmount: number; // Grand total including tax\r\n  taxAmount: number;\r\n  username: string;\r\n  purchaseId?: number;\r\n  paymentId?: string; // Optional, set after initiation\r\n  payerId?: string | null;\r\n  pointsEarned?: number | null;\r\n  discountAmount?: number; // Optional, total discount (coupon + loyalty)\r\n  approvalURl?: string;\r\n  transactionStatus?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "discountedPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "quantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItemDisplay",
            "id": "interface-CartItemDisplay-51c74fc38dbb8550f43a607aa57dbdf678df795d030d92006d810c367707a9cf3d1f6b0d628156e3d4da4548f155f11c24ca318262e1ae5006b5c1be4c5f4a0f",
            "file": "src/app/customer/Model/cart/cart-item-display.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Discount } from './../discount';\r\n\r\nexport interface CartItemDisplay {\r\n  productName: string;\r\n  price: number;\r\n  cartQuantity: number;\r\n  currency: string;\r\n  hasDiscount: boolean;\r\n  discount?: Discount;\r\n  prodImgURL?: string | null;\r\n  barcode: string; // Add barcode explicitly since it's used\r\n  discountedPrice: number; // Change from string to number\r\n}\r\n",
            "properties": [
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "cartQuantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Discount",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "discountedPrice",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hasDiscount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "prodImgURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CartItems",
            "id": "interface-CartItems-a369e58adc826719550caa23bed17f549b87e2f921e588a7de69611dcde3b091f80742727e6a202822d5031f90600fbd56155a33a12ebeaaf25923a25332c281",
            "file": "src/app/customer/Model/cart/cart-items.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Discount } from './../discount';\r\n\r\nexport interface CartItems {\r\n  productId: number;\r\n  productGuid: string;\r\n  productName: string;\r\n  barcode: string;\r\n  brand: string;\r\n  cartQuantity: number;\r\n  categoryId: number;\r\n  createdBy: string;\r\n  createdOn: string;\r\n  currency: string;\r\n  discount?: Discount;\r\n  expDate: string;\r\n  hasDiscount: boolean;\r\n  manuDate: string;\r\n  price: number;\r\n  prodImgURL: string | null;\r\n  productDesc: string;\r\n  rating: number;\r\n  stockUnit: number;\r\n  updatedBy: string | null;\r\n  updatedOn: string | null;\r\n}\r\n",
            "properties": [
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "brand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "cartQuantity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "categoryId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "createdBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "createdOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "discount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Discount",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "expDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "hasDiscount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "manuDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prodImgURL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "productDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "productGuid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "productId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "productName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "rating",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "stockUnit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "updatedBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "updatedOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckoutData",
            "id": "interface-CheckoutData-78ad6b4e2749ed77abe6c73458752f060a258b687fc86aecffe3797b6f1aff1f63156f9998bf53e164c3aad9c4e35a3526a44487c468d8c28b16d1e17ef6f233",
            "file": "src/app/customer/Model/checkOut.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CartItem {\r\n  barcode: string;\r\n  name: string;\r\n  price: number;\r\n  discountedPrice: number;\r\n  quantity: number;\r\n}\r\n\r\nexport interface CheckoutData {\r\n  cartItems: CartItem[];\r\n  totalAmount: number; // After discounts applied to items\r\n  originalAmount: number; // Before any discounts\r\n  couponCode?: string | null;\r\n  couponDiscount: number;\r\n  loyaltyPointsUsed: number;\r\n  loyaltyDiscount: number;\r\n  finalAmount: number; // Grand total including tax\r\n  taxAmount: number;\r\n  username: string;\r\n  purchaseId?: number;\r\n  paymentId?: string; // Optional, set after initiation\r\n  payerId?: string | null;\r\n  pointsEarned?: number | null;\r\n  discountAmount?: number; // Optional, total discount (coupon + loyalty)\r\n  approvalURl?: string;\r\n  transactionStatus?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "approvalURl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "cartItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "couponCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "couponDiscount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "discountAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "finalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "loyaltyDiscount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loyaltyPointsUsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "originalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "payerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "paymentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "pointsEarned",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "purchaseId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taxAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "totalAmount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "transactionStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckoutResponse",
            "id": "interface-CheckoutResponse-597cb2876841e0f9eb1181ad24d9f64a55b1887825ef3e6ee5117bdb50ff6c01f50971c1086569f6a9c00a351279a86a10db98364d163a725423056f2b34033b",
            "file": "src/app/customer/apiService/checkoutService/checkout.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CartService } from '../cartService/cart.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { isTokenExpired } from 'app/utils/jwt.utils';\r\nimport { Router } from '@angular/router';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\n\r\ninterface CheckoutResponse {\r\n  status: string;\r\n  message: string;\r\n  data: CheckoutData;\r\n}\r\ninterface CancelResponse {\r\n  status: string;\r\n  message: string;\r\n  data: string; // Based on your backend signature: ApiResponseWrapper<String>\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  private baseUrl = '/v1';\r\n  private couponUrl = '/coupon';\r\n  private TAX_RATE = 0.3;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private cartService: CartService,\r\n    private toastService: ToastService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n  // loyalty points\r\n  async fetchLoyaltyPoints(username: string): Promise<number | null> {\r\n    const token = this.authService.getToken();\r\n    if (!token || isTokenExpired(token)) {\r\n      console.warn('No valid token for loyalty points fetch.');\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      const points = await firstValueFrom(\r\n        this.http.get<number>(\r\n          `${this.baseUrl}/purchase/${username}/loyaltyPoints`,\r\n        ),\r\n      );\r\n      return points || 0;\r\n    } catch (error: any) {\r\n      if (error.status === 404) {\r\n        return null; // No loyalty points record exists\r\n      }\r\n      console.error('Error fetching loyalty points:', error);\r\n      this.toastService.showError('Failed to fetch loyalty points');\r\n      throw error; // Re-throw for other errors\r\n    }\r\n  }\r\n  // coupon\r\n  async applyCoupon(couponCode: string, totalAmount: number): Promise<number> {\r\n    if (!couponCode) {\r\n      this.toastService.showError('Please enter a valid coupon code');\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      const response: any = await firstValueFrom(\r\n        this.http.post(`${this.couponUrl}/apply`, {\r\n          couponCode,\r\n          totalAmount: totalAmount.toString(),\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        const discount = parseFloat(response.data) || 0;\r\n        return discount;\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to apply coupon',\r\n        );\r\n        return 0;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error applying coupon:', error);\r\n      this.toastService.showError('Failed to apply coupon');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // validate loyalty points\r\n  validateLoyaltyPoints(\r\n    points: number,\r\n    availablePoints: number | null,\r\n  ): number {\r\n    const effectivePoints = availablePoints ?? 0; // Treat null as 0\r\n    if (points > effectivePoints) {\r\n      this.toastService.showWarning('Insufficient loyalty points.');\r\n      return 0;\r\n    } else if (points < 0) {\r\n      this.toastService.showWarning('Points cannot be negative.');\r\n      return 0;\r\n    } else {\r\n      return points; // 1 point = 1 USD\r\n    }\r\n  }\r\n  // calculate totals\r\n  calculateTotals(\r\n    originalTotal: number,\r\n    cartTotal: number,\r\n    couponDiscount: number,\r\n    loyaltyDiscount: number,\r\n  ): { taxAmount: number; grandTotal: number } {\r\n    const subtotal = cartTotal - couponDiscount - loyaltyDiscount;\r\n    const taxAmount = subtotal * this.TAX_RATE;\r\n    const grandTotal = subtotal + taxAmount;\r\n    return { taxAmount, grandTotal: grandTotal < 0 ? 0 : grandTotal };\r\n  }\r\n\r\n  // initiate purchase\r\n  async initiatePurchase(\r\n    username: string,\r\n    couponCode: string | null,\r\n    loyaltyPointsUsed: number,\r\n  ): Promise<CheckoutResponse> {\r\n    const cartItems = this.cartService.getCartItemsWithDiscounts();\r\n    const totals = this.cartService.calculateCartTotals();\r\n    const couponDiscount = couponCode\r\n      ? await this.applyCoupon(couponCode, totals.totalAmount)\r\n      : 0;\r\n    const availablePoints = await this.fetchLoyaltyPoints(username);\r\n    const loyaltyDiscount = this.validateLoyaltyPoints(\r\n      loyaltyPointsUsed,\r\n      availablePoints,\r\n    );\r\n    const { taxAmount, grandTotal } = this.calculateTotals(\r\n      totals.originalTotal,\r\n      totals.totalAmount,\r\n      couponDiscount,\r\n      loyaltyDiscount,\r\n    );\r\n\r\n    const checkoutData: CheckoutData = {\r\n      cartItems: cartItems.map((item) => ({\r\n        barcode: item.barcode,\r\n        name: item.productName,\r\n        price: item.price,\r\n        discountedPrice: item.discountedPrice,\r\n        quantity: item.cartQuantity,\r\n      })),\r\n      originalAmount: totals.originalTotal,\r\n      totalAmount: totals.totalAmount, // After discount\r\n      couponCode: couponCode || null,\r\n      couponDiscount: couponDiscount || 0,\r\n      loyaltyPointsUsed: loyaltyPointsUsed || 0,\r\n      loyaltyDiscount: loyaltyDiscount || 0,\r\n      taxAmount,\r\n      finalAmount: grandTotal,\r\n      username,\r\n    };\r\n    sessionStorage.setItem('checkoutData', JSON.stringify(checkoutData));\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      this.router.navigate(['/login']);\r\n      throw new Error('Token is missing. Please log in again.');\r\n    }\r\n    // document.cookie = `authToken=${token}; path=/; SameSite=Lax`;\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(\r\n          `${this.baseUrl}/purchase`,\r\n          checkoutData,\r\n        ),\r\n      );\r\n      if (response.status === 'success' && response.data?.approvalURl) {\r\n        this.toastService.showSuccess(\r\n          'Payment initiated! Redirecting to PayPal...',\r\n        );\r\n        sessionStorage.setItem(\r\n          'checkoutData',\r\n          JSON.stringify({\r\n            ...checkoutData,\r\n            purchaseId: response.data.purchaseId,\r\n            paymentId: response.data.paymentId,\r\n          }),\r\n        );\r\n        window.location.href = response.data.approvalURl; // Redirect to PayPal\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to initiate payment.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Checkout error:', error);\r\n      this.toastService.showError(\r\n        'Checkout failed: ' + (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n  // execute purchase payment\r\n  async executePurchasePayment(\r\n    checkoutData: CheckoutData,\r\n    purchaseId: number,\r\n    paymentId: string,\r\n    payerId: string,\r\n  ): Promise<CheckoutResponse> {\r\n    debugger;\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/payment/execute?paymentId=${paymentId}&PayerID=${payerId}`;\r\n    console.log('Executing payment with URL:', url); // Debug log\r\n    console.log('Payload:', checkoutData); // Debug log\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(url, checkoutData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Payment completed successfully!');\r\n        sessionStorage.removeItem('paymentDetails');\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Payment execution error:', error);\r\n      this.toastService.showError('Payment execution failed: ');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // handle paypal cancel\r\n  async cancelPurchase(purchaseId: number): Promise<CancelResponse> {\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/cancel`;\r\n    try {\r\n      const response: CancelResponse = await firstValueFrom(\r\n        this.http.post<CancelResponse>(\r\n          url,\r\n          {},\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          },\r\n        ),\r\n      );\r\n\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Purchase cancelled successfully!');\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to cancel purchase.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Cancel purchase error:', error);\r\n      this.toastService.showError(\r\n        'Failed to cancel purchase: ' +\r\n          (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckoutData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Discount",
            "id": "interface-Discount-87224b5827218af73d7e2522e74e8952c3ebdb7c77dca1b60039701f7696ef51a3874275a86bb5c33bf4f908c0c7492b6aa62b69796b6a1efd714c95dd9b6dca",
            "file": "src/app/customer/Model/discount.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Discount {\r\n  isPercentage: boolean;\r\n  discountValue: number;\r\n  barcode?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "barcode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "discountValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "isPercentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Login",
            "id": "interface-Login-8c75343a90ea430731636c54331f9752681bf49ab19e539c38be0f287eebccd48c19d14e40b55f73e5634c6ce90c97b2505eb174dd0b6a2bd42909fb97929bfe",
            "file": "src/app/login.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": []
        },
        {
            "name": "Login",
            "id": "interface-Login-6f0b90b222371a48934640e5af582b881c9c15ff938990893783910fe89c4cf904e501b36f1ae02dc88bd396e5b03f2f17104b1cd276f63a1849d073b1bbb51c-1",
            "file": "src/app/customer/Model/login.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Login {\r\n  username: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Login-1"
        },
        {
            "name": "NavItem",
            "id": "interface-NavItem-933361225b33fa4681510e0fa90c32cce629df1b5985a9c70640236521bd6ecf80cc417363e03c9fc1ccb303862438ef54981c976a18418c90a26b959ebfb12a",
            "file": "src/app/staff/Components/sidebar/sidebar.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { filter } from 'rxjs/operators';\r\n\r\ninterface NavItem {\r\n  name: string;\r\n  icon: string;\r\n  route?: string;\r\n  children?: NavItem[];\r\n  expanded?: boolean;\r\n}\r\n\r\n@Component({\r\n  imports: [CommonModule, MatIconModule],\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css'],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  tabs: NavItem[] = [];\r\n  userRole!: string;\r\n  activeIndex = 0; // Tracks the active parent tab\r\n  activeChildIndex: number | null = null; // Tracks the active child tab (null if no child is active)\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) {\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe(() => {\r\n        this.updateActiveTab();\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userRole = this.authService.getRoles();\r\n    this.setNavItemsBasedOnRole(this.userRole);\r\n  }\r\n\r\n  /**\r\n   * Set the active tab (parent or child) and navigate to its route.\r\n   * @param parentIndex - The index of the parent tab.\r\n   * @param childIndex - The index of the child tab (optional).\r\n   */\r\n  setActive(parentIndex: number, childIndex?: number): void {\r\n    const tab = this.tabs[parentIndex];\r\n\r\n    // If a child index is provided, handle child tab activation\r\n    if (childIndex !== undefined && tab.children) {\r\n      this.activeIndex = parentIndex;\r\n      this.activeChildIndex = childIndex;\r\n      const childTab = tab.children[childIndex];\r\n      if (childTab.route) {\r\n        this.router.navigate([childTab.route]);\r\n      }\r\n      tab.expanded = true; // Ensure parent is expanded\r\n      return;\r\n    }\r\n\r\n    // Handle parent tab activation\r\n    this.activeIndex = parentIndex;\r\n    this.activeChildIndex = null; // Reset child index when a parent tab is clicked\r\n\r\n    if (tab.children) {\r\n      this.toggleExpand(parentIndex);\r\n      return;\r\n    }\r\n\r\n    if (tab.route) {\r\n      this.router.navigate([tab.route]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the expanded state of a tab with children.\r\n   * @param index - The index of the tab to expand/collapse.\r\n   */\r\n  toggleExpand(index: number): void {\r\n    const tab = this.tabs[index];\r\n    if (tab.children) {\r\n      tab.expanded = !tab.expanded;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expose the number of tabs for CSS calculations.\r\n   */\r\n  get tabCount(): number {\r\n    return this.tabs.length;\r\n  }\r\n\r\n  /**\r\n   * Set navigation items based on the user's role.\r\n   */\r\n  private setNavItemsBasedOnRole(role: string | null): void {\r\n    switch (role) {\r\n      case 'MANAGER':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/staff/dashboard' },\r\n          { name: 'Customers', icon: 'people', route: '/staff/dashboard' },\r\n          {\r\n            name: 'Suppliers',\r\n            icon: 'local_shipping',\r\n            route: '/staff/suppliers',\r\n          },\r\n          {\r\n            name: 'Analytics',\r\n            icon: 'analytics',\r\n            expanded: false,\r\n            children: [\r\n              {\r\n                name: 'Customers',\r\n                icon: 'people',\r\n                route: '/staff/analytics/customers',\r\n              },\r\n              {\r\n                name: 'Suppliers',\r\n                icon: 'local_shipping',\r\n                route: '/staff/analytics/suppliers',\r\n              },\r\n              {\r\n                name: 'Staff',\r\n                icon: 'groups',\r\n                route: '/staff/analytics/staff',\r\n              },\r\n              {\r\n                name: 'Sales',\r\n                icon: 'trending_up',\r\n                route: '/staff/analytics/sales',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: 'Discounts & Coupons',\r\n            icon: 'local_offer',\r\n            route: '/staff/discounts',\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/staff/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      case 'ADMIN':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/admin/dashboard' },\r\n          { name: 'Customers', icon: 'people', route: '/admin/customers' },\r\n          {\r\n            name: 'Loyalty Program',\r\n            icon: 'card_giftcard',\r\n            route: '/admin/loyalty',\r\n          },\r\n          {\r\n            name: 'Coupons Management',\r\n            icon: 'local_offer',\r\n            route: '/admin/coupons',\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/admin/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      case 'STAFF':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/staff/dashboard' },\r\n          {\r\n            name: 'Inventory',\r\n            icon: 'inventory_2',\r\n            expanded: false,\r\n            children: [\r\n              {\r\n                name: 'Products',\r\n                icon: 'shopping_bag',\r\n                route: '/staff/inventory/products',\r\n              },\r\n              {\r\n                name: 'Category',\r\n                icon: 'category',\r\n                route: '/staff/inventory/category',\r\n              },\r\n              {\r\n                name: 'Brands',\r\n                icon: 'store_mall_directory',\r\n                route: '/staff/inventory/brands',\r\n              },\r\n              {\r\n                name: 'Discounts',\r\n                icon: 'local_offer',\r\n                route: '/staff/inventory/discounts',\r\n              },\r\n              {\r\n                name: 'Expiry',\r\n                icon: 'event_available',\r\n                route: '/staff/inventory/expiry',\r\n              },\r\n              {\r\n                name: 'Low Stock',\r\n                icon: 'inventory_2',\r\n                route: '/staff/inventory/low-stock',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/staff/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      default:\r\n        this.tabs = [];\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the active tab based on the current route.\r\n   */\r\n  private updateActiveTab(): void {\r\n    const currentRoute = this.router.url;\r\n\r\n    this.tabs.forEach((tab, parentIndex) => {\r\n      if (tab.route === currentRoute) {\r\n        this.activeIndex = parentIndex;\r\n        this.activeChildIndex = null;\r\n        return;\r\n      }\r\n      if (tab.children) {\r\n        const childIndex = tab.children.findIndex(\r\n          (child) => child.route === currentRoute,\r\n        );\r\n        if (childIndex !== -1) {\r\n          this.activeIndex = parentIndex;\r\n          this.activeChildIndex = childIndex;\r\n          tab.expanded = true;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log out the user and navigate to the login page.\r\n   */\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login'], { replaceUrl: true });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-f699fd9f2b3a367bc385e2db0d4fc5e9523fa83c7a19754bcd0bf5ed59117023d6bf88a52a85be656549babd500bdf437dcbaf3f8c504f1c72dd5914aa3ec12f",
            "file": "src/app/customer/apiService/api.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n\r\n  constructor() { }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 6
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-6d62a2d5dbf5bac56d57a929f6f860d3415fcdbb79ef938fd164d91f9da413762531c56dfbf2e1230506293fa54a51967890cc0150eaac7bc9e1c81d98782fa2",
            "file": "src/app/Service/auth/auth.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/user'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "defaultAvatar",
                    "defaultValue": "'assets/default-avatar.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "isLoggedIn$",
                    "defaultValue": "this.isLoggedInSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isLoggedInSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "user$",
                    "defaultValue": "this.userSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userSubject",
                    "defaultValue": "new BehaviorSubject<any>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setRoles",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTokenInCookie",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUserFromToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ],
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyOtp",
                    "args": [
                        {
                            "name": "otpData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "otpData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "otp",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap, throwError } from 'rxjs';\r\nimport { CookieService } from 'ngx-cookie-service';\r\nimport { decodeToken, isTokenExpired } from 'app/utils/jwt.utils';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  public isLoggedInSubject = new BehaviorSubject<boolean>(false);\r\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n  defaultAvatar = 'assets/default-avatar.png';\r\n\r\n  // New BehaviorsSubject to store our data\r\n  private userSubject = new BehaviorSubject<any>(null);\r\n  user$ = this.userSubject.asObservable();\r\n\r\n  private apiUrl = '/user';\r\n  constructor(\r\n    private http: HttpClient,\r\n    private cookieService: CookieService,\r\n    private toastService: ToastService,\r\n  ) {\r\n    // Check if token exists on app initialization\r\n    const token = this.getToken();\r\n    if (token && !isTokenExpired(token)) {\r\n      this.isLoggedInSubject.next(true);\r\n      this.setUserFromToken(token);\r\n    }\r\n  }\r\n\r\n  login(username: string, password: string): Observable<any> {\r\n    return this.http\r\n      .post(\r\n        `${this.apiUrl}/login\r\n        `,\r\n        { username, password },\r\n        { withCredentials: true },\r\n      )\r\n      .pipe(\r\n        tap((response: any) => {\r\n          const token = response.data.token; // Assuming backend returns { token: 'jwt-token' }\r\n          if (token) {\r\n            // console.log('Token received from backend:', token);\r\n            this.setTokenInCookie(token); // Store token securely in a cookie\r\n            this.setUserFromToken(token);\r\n            this.isLoggedInSubject.next(true);\r\n          } else {\r\n            // console.error('No token found in response');\r\n            this.toastService.showError('Invalid username or password');\r\n          }\r\n        }),\r\n      );\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return this.cookieService.get('token'); // Retrieve token from cookies\r\n  }\r\n  logout() {\r\n    this.cookieService.delete('token', '/'); // Remove token from cookies\r\n    this.isLoggedInSubject.next(false);\r\n    this.userSubject.next(null); // Clear user data\r\n  }\r\n  isLoggedIn(): boolean {\r\n    const token = this.getToken();\r\n    return !!token && !isTokenExpired(token);\r\n  }\r\n  getUserName(): string {\r\n    const token = this.getToken();\r\n    if (!token) return 'Guest';\r\n\r\n    const decodedToken = decodeToken(token);\r\n    return decodedToken?.sub || 'Guest'; // Extract name from token claims\r\n  }\r\n  getRoles(): string {\r\n    const token = this.getToken();\r\n    if (!token) return 'guest';\r\n\r\n    const decodedToken = decodeToken(token);\r\n    return decodedToken?.role || 'guest'; // Extract roles from token claims\r\n  }\r\n  setRoles(roles: string[]): void {\r\n    this.cookieService.set('role', JSON.stringify(roles));\r\n  }\r\n  private setTokenInCookie(token: string): void {\r\n    this.cookieService.set(\r\n      'token', // Name of the cookie\r\n      token, // Value of the cookie (JWT token)\r\n      1, // Expiration time in days\r\n      '/', // Path (accessible across the entire app)\r\n      undefined, // Domain (optional)\r\n      false, // Secure flag (only send over HTTPS)\r\n      'Lax', // SameSite policy ('Strict', 'Lax', or 'None')\r\n    );\r\n  }\r\n  // Method to extract user data from token and update userSubject\r\n  public setUserFromToken(token: string): void {\r\n    const decodedToken = decodeToken(token);\r\n    const userData = {\r\n      username: decodedToken?.sub || 'Guest', // Extract name from token\r\n      avatar: decodedToken?.avatar || this.defaultAvatar, // Extract avatar URL or use default\r\n      role: decodedToken?.role || 'user',\r\n    };\r\n    this.userSubject.next(userData); // Update user data\r\n  }\r\n\r\n  verifyOtp(otpData: any, otp: string): Observable<any> {\r\n    const params = new HttpParams().set('otp', otp);\r\n    return this.http\r\n      .post(`${this.apiUrl}/verify-otp`, otpData, { params })\r\n      .pipe(\r\n        tap((response: any) => {\r\n          if (response.status === 'success') {\r\n            // console.log('otp verified successfully');\r\n            this.toastService.showSuccess(\r\n              'You have been successfully registered! Please Login again',\r\n            );\r\n          } else {\r\n            this.toastService.showError('Invalid OTP');\r\n          }\r\n        }),\r\n      );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CartService",
            "id": "injectable-CartService-56a69b002b396b10c66defc6dcd957884e301aa4a538a42d93f01793f18621b35859ff8449f26af3c7f205788e8f1e43558745ac6b4fe965e6397963fe800ad2",
            "file": "src/app/customer/apiService/cartService/cart.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/product/search'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CartItems[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartItems$",
                    "defaultValue": "this.cartItemsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "cartItemsSubject",
                    "defaultValue": "new BehaviorSubject<CartItemDisplay[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "discountApiUrl",
                    "defaultValue": "'/discount/active'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateCartTotals",
                    "args": [],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "calculateDiscountedPrice",
                    "args": [
                        {
                            "name": "item",
                            "type": "CartItems",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "discount",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "CartItems",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "discount",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "fetchActiveDiscount",
                    "args": [
                        {
                            "name": "barcodes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "barcodes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCartItems",
                    "args": [],
                    "optional": false,
                    "returnType": "CartItems[]",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCartItemsWithDiscounts",
                    "args": [],
                    "optional": false,
                    "returnType": "CartItemDisplay[]",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getTotalItemCounts",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadCartFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCart",
                    "args": [
                        {
                            "name": "cart",
                            "type": "CartItems[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "cart",
                            "type": "CartItems[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemQuantity",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateCartItemsWithDiscounts",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "validateStock",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { CartItems } from 'app/customer/Model/cart/cart-items';\r\nimport { CartItemDisplay } from 'app/customer/Model/cart/cart-item-display';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CartService {\r\n  private apiUrl = '/product/search';\r\n  private discountApiUrl = '/discount/active';\r\n  private cartItems: CartItems[] = [];\r\n  private cartItemsSubject = new BehaviorSubject<CartItemDisplay[]>([]);\r\n  cartItems$ = this.cartItemsSubject.asObservable();\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private toastService: ToastService,\r\n  ) {\r\n    this.loadCartFromStorage();\r\n  }\r\n\r\n  private loadCartFromStorage(): void {\r\n    const storedCart = JSON.parse(sessionStorage.getItem('cart') || '[]');\r\n    this.cartItems = storedCart;\r\n    this.updateCartItemsWithDiscounts();\r\n  }\r\n\r\n  private saveCart(cart: CartItems[]): void {\r\n    this.cartItems = cart;\r\n    sessionStorage.setItem('cart', JSON.stringify(cart));\r\n\r\n    this.updateCartItemsWithDiscounts().then(() => {\r\n      const { totalAmount, originalTotal } = this.calculateCartTotals();\r\n      const totalQuantity = this.getTotalItemCounts();\r\n\r\n      sessionStorage.setItem('totalAmount', totalAmount.toString());\r\n      sessionStorage.setItem('originalTotal', originalTotal.toString());\r\n      sessionStorage.setItem('totalQuantity', totalQuantity.toString());\r\n    });\r\n  }\r\n\r\n  getCartItems(): CartItems[] {\r\n    return [...this.cartItems];\r\n  }\r\n\r\n  getCartItemsWithDiscounts(): CartItemDisplay[] {\r\n    return this.cartItemsSubject.value;\r\n  }\r\n\r\n  async addToCart(product: any, quantity: number): Promise<void> {\r\n    if (quantity <= 0 || quantity > product.stockUnit) {\r\n      this.toastService.showWarning(\r\n        'Invalid quantity. Please select a valid amount.',\r\n      );\r\n      return;\r\n    }\r\n\r\n    const isValid = await this.validateStock(product.barcode, quantity);\r\n    if (!isValid) {\r\n      this.toastService.showWarning('Stock Not Available!');\r\n      return;\r\n    }\r\n\r\n    const cart = this.getCartItems();\r\n    const existingItemIndex = cart.findIndex(\r\n      (item) => item.barcode === product.barcode,\r\n    );\r\n\r\n    if (existingItemIndex !== -1) {\r\n      const newQuantity = cart[existingItemIndex].cartQuantity + quantity;\r\n      if (newQuantity > product.stockUnit) {\r\n        this.toastService.showWarning('Cannot exceed available stock!');\r\n        return;\r\n      }\r\n      cart[existingItemIndex].cartQuantity = newQuantity;\r\n    } else {\r\n      cart.push({ ...product, cartQuantity: quantity });\r\n    }\r\n\r\n    this.saveCart(cart);\r\n    this.toastService.showSuccess('Item added to cart!');\r\n  }\r\n\r\n  async validateStock(barcode: string, quantity: number): Promise<boolean> {\r\n    try {\r\n      const isValid = await firstValueFrom(\r\n        this.http.get<boolean>(`${this.apiUrl}/validate-stock`, {\r\n          params: { barcode, quantity: quantity.toString() },\r\n        }),\r\n      );\r\n      return isValid;\r\n    } catch (error) {\r\n      console.error('Error validating stock:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  removeFromCart(barcode: string): void {\r\n    const cart = this.getCartItems().filter((item) => item.barcode !== barcode);\r\n    this.saveCart(cart);\r\n    this.toastService.showSuccess('Item removed from cart!');\r\n  }\r\n\r\n  clearCart(): void {\r\n    this.saveCart([]);\r\n    this.toastService.showSuccess('Cart cleared!');\r\n  }\r\n\r\n  async updateCartItemQuantity(\r\n    barcode: string,\r\n    quantity: number,\r\n  ): Promise<void> {\r\n    const cart = this.getCartItems();\r\n    const itemIndex = cart.findIndex((item) => item.barcode === barcode);\r\n\r\n    if (itemIndex === -1) {\r\n      this.toastService.showWarning('Item not found in the cart!');\r\n      return;\r\n    }\r\n\r\n    if (quantity <= 0) {\r\n      this.removeFromCart(barcode);\r\n      return;\r\n    }\r\n\r\n    const isValid = await this.validateStock(barcode, quantity);\r\n    if (!isValid) {\r\n      this.toastService.showWarning('Stock Not Available!');\r\n      return;\r\n    }\r\n\r\n    cart[itemIndex].cartQuantity = quantity;\r\n    this.saveCart(cart);\r\n    // this.toastService.showSuccess('Cart updated!');\r\n  }\r\n\r\n  async fetchActiveDiscount(barcodes: string[]): Promise<any> {\r\n    try {\r\n      const discounts = await firstValueFrom(\r\n        this.http.get<any>(this.discountApiUrl, {\r\n          params: { barcodes: barcodes.join(',') },\r\n        }),\r\n      );\r\n      return discounts;\r\n    } catch (error) {\r\n      console.error('Error fetching discounts:', error);\r\n      return { data: [] };\r\n    }\r\n  }\r\n\r\n  private async updateCartItemsWithDiscounts(): Promise<void> {\r\n    const rawCartItems = this.getCartItems();\r\n    if (!rawCartItems.length) {\r\n      this.cartItemsSubject.next([]);\r\n      return;\r\n    }\r\n\r\n    const barcodes = rawCartItems.map((item) => item.barcode);\r\n    const discountResponse = await this.fetchActiveDiscount(barcodes);\r\n    const discounts = discountResponse.data;\r\n\r\n    const discountMap = new Map<string, any>();\r\n    discounts.forEach((discountObj: any) => {\r\n      discountMap.set(discountObj.barcode, discountObj.discount);\r\n    });\r\n\r\n    const transformedItems = rawCartItems.map((item) => {\r\n      const discount = discountMap.get(item.barcode);\r\n      const hasDiscount = !!discount;\r\n      const discountedPrice = this.calculateDiscountedPrice(item, discount);\r\n      return {\r\n        productName: item.productName,\r\n        price: item.price || 0,\r\n        cartQuantity: item.cartQuantity || 1,\r\n        currency: item.currency || 'USD',\r\n        hasDiscount,\r\n        discount,\r\n        prodImgURL: item.prodImgURL || null,\r\n        barcode: item.barcode,\r\n        discountedPrice,\r\n      } as CartItemDisplay;\r\n    });\r\n\r\n    this.cartItemsSubject.next(transformedItems);\r\n  }\r\n\r\n  private calculateDiscountedPrice(item: CartItems, discount?: any): number {\r\n    let price = item.price || 0;\r\n    if (discount) {\r\n      if (discount.isPercentage) {\r\n        price -= price * ((discount.discountValue || 0) / 100);\r\n      } else {\r\n        price -= discount.discountValue || 0;\r\n      }\r\n    }\r\n    return Math.max(0, price);\r\n  }\r\n\r\n  calculateCartTotals(): { totalAmount: number; originalTotal: number } {\r\n    const items = this.getCartItemsWithDiscounts();\r\n    return items.reduce(\r\n      (acc, item) => {\r\n        const discountedPrice = item.discountedPrice || 0;\r\n        const originalPrice = item.price || 0;\r\n        const quantity = item.cartQuantity || 1;\r\n        acc.totalAmount += discountedPrice * quantity;\r\n        acc.originalTotal += originalPrice * quantity;\r\n        return acc;\r\n      },\r\n      { totalAmount: 0, originalTotal: 0 },\r\n    );\r\n  }\r\n\r\n  getTotalItemCounts(): number {\r\n    return this.cartItems.reduce(\r\n      (sum, item) => sum + (item.cartQuantity || 1),\r\n      0,\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CheckoutService",
            "id": "injectable-CheckoutService-597cb2876841e0f9eb1181ad24d9f64a55b1887825ef3e6ee5117bdb50ff6c01f50971c1086569f6a9c00a351279a86a10db98364d163a725423056f2b34033b",
            "file": "src/app/customer/apiService/checkoutService/checkout.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "couponUrl",
                    "defaultValue": "'/coupon'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TAX_RATE",
                    "defaultValue": "0.3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyCoupon",
                    "args": [
                        {
                            "name": "couponCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "totalAmount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<number>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "couponCode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "totalAmount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateTotals",
                    "args": [
                        {
                            "name": "originalTotal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cartTotal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "couponDiscount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loyaltyDiscount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "originalTotal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cartTotal",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "couponDiscount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loyaltyDiscount",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelPurchase",
                    "args": [
                        {
                            "name": "purchaseId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CancelResponse>",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "purchaseId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "executePurchasePayment",
                    "args": [
                        {
                            "name": "checkoutData",
                            "type": "CheckoutData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "purchaseId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "paymentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CheckoutResponse>",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "checkoutData",
                            "type": "CheckoutData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "purchaseId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "paymentId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payerId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchLoyaltyPoints",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<number | null>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initiatePurchase",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "couponCode",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "loyaltyPointsUsed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<CheckoutResponse>",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "couponCode",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "loyaltyPointsUsed",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateLoyaltyPoints",
                    "args": [
                        {
                            "name": "points",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "availablePoints",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "points",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "availablePoints",
                            "type": "number | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { CartService } from '../cartService/cart.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { isTokenExpired } from 'app/utils/jwt.utils';\r\nimport { Router } from '@angular/router';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\n\r\ninterface CheckoutResponse {\r\n  status: string;\r\n  message: string;\r\n  data: CheckoutData;\r\n}\r\ninterface CancelResponse {\r\n  status: string;\r\n  message: string;\r\n  data: string; // Based on your backend signature: ApiResponseWrapper<String>\r\n}\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CheckoutService {\r\n  private baseUrl = '/v1';\r\n  private couponUrl = '/coupon';\r\n  private TAX_RATE = 0.3;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private cartService: CartService,\r\n    private toastService: ToastService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n  // loyalty points\r\n  async fetchLoyaltyPoints(username: string): Promise<number | null> {\r\n    const token = this.authService.getToken();\r\n    if (!token || isTokenExpired(token)) {\r\n      console.warn('No valid token for loyalty points fetch.');\r\n      throw new Error('User not authenticated');\r\n    }\r\n\r\n    try {\r\n      const points = await firstValueFrom(\r\n        this.http.get<number>(\r\n          `${this.baseUrl}/purchase/${username}/loyaltyPoints`,\r\n        ),\r\n      );\r\n      return points || 0;\r\n    } catch (error: any) {\r\n      if (error.status === 404) {\r\n        return null; // No loyalty points record exists\r\n      }\r\n      console.error('Error fetching loyalty points:', error);\r\n      this.toastService.showError('Failed to fetch loyalty points');\r\n      throw error; // Re-throw for other errors\r\n    }\r\n  }\r\n  // coupon\r\n  async applyCoupon(couponCode: string, totalAmount: number): Promise<number> {\r\n    if (!couponCode) {\r\n      this.toastService.showError('Please enter a valid coupon code');\r\n      return 0;\r\n    }\r\n\r\n    try {\r\n      const response: any = await firstValueFrom(\r\n        this.http.post(`${this.couponUrl}/apply`, {\r\n          couponCode,\r\n          totalAmount: totalAmount.toString(),\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        const discount = parseFloat(response.data) || 0;\r\n        return discount;\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to apply coupon',\r\n        );\r\n        return 0;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error applying coupon:', error);\r\n      this.toastService.showError('Failed to apply coupon');\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // validate loyalty points\r\n  validateLoyaltyPoints(\r\n    points: number,\r\n    availablePoints: number | null,\r\n  ): number {\r\n    const effectivePoints = availablePoints ?? 0; // Treat null as 0\r\n    if (points > effectivePoints) {\r\n      this.toastService.showWarning('Insufficient loyalty points.');\r\n      return 0;\r\n    } else if (points < 0) {\r\n      this.toastService.showWarning('Points cannot be negative.');\r\n      return 0;\r\n    } else {\r\n      return points; // 1 point = 1 USD\r\n    }\r\n  }\r\n  // calculate totals\r\n  calculateTotals(\r\n    originalTotal: number,\r\n    cartTotal: number,\r\n    couponDiscount: number,\r\n    loyaltyDiscount: number,\r\n  ): { taxAmount: number; grandTotal: number } {\r\n    const subtotal = cartTotal - couponDiscount - loyaltyDiscount;\r\n    const taxAmount = subtotal * this.TAX_RATE;\r\n    const grandTotal = subtotal + taxAmount;\r\n    return { taxAmount, grandTotal: grandTotal < 0 ? 0 : grandTotal };\r\n  }\r\n\r\n  // initiate purchase\r\n  async initiatePurchase(\r\n    username: string,\r\n    couponCode: string | null,\r\n    loyaltyPointsUsed: number,\r\n  ): Promise<CheckoutResponse> {\r\n    const cartItems = this.cartService.getCartItemsWithDiscounts();\r\n    const totals = this.cartService.calculateCartTotals();\r\n    const couponDiscount = couponCode\r\n      ? await this.applyCoupon(couponCode, totals.totalAmount)\r\n      : 0;\r\n    const availablePoints = await this.fetchLoyaltyPoints(username);\r\n    const loyaltyDiscount = this.validateLoyaltyPoints(\r\n      loyaltyPointsUsed,\r\n      availablePoints,\r\n    );\r\n    const { taxAmount, grandTotal } = this.calculateTotals(\r\n      totals.originalTotal,\r\n      totals.totalAmount,\r\n      couponDiscount,\r\n      loyaltyDiscount,\r\n    );\r\n\r\n    const checkoutData: CheckoutData = {\r\n      cartItems: cartItems.map((item) => ({\r\n        barcode: item.barcode,\r\n        name: item.productName,\r\n        price: item.price,\r\n        discountedPrice: item.discountedPrice,\r\n        quantity: item.cartQuantity,\r\n      })),\r\n      originalAmount: totals.originalTotal,\r\n      totalAmount: totals.totalAmount, // After discount\r\n      couponCode: couponCode || null,\r\n      couponDiscount: couponDiscount || 0,\r\n      loyaltyPointsUsed: loyaltyPointsUsed || 0,\r\n      loyaltyDiscount: loyaltyDiscount || 0,\r\n      taxAmount,\r\n      finalAmount: grandTotal,\r\n      username,\r\n    };\r\n    sessionStorage.setItem('checkoutData', JSON.stringify(checkoutData));\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      this.router.navigate(['/login']);\r\n      throw new Error('Token is missing. Please log in again.');\r\n    }\r\n    // document.cookie = `authToken=${token}; path=/; SameSite=Lax`;\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(\r\n          `${this.baseUrl}/purchase`,\r\n          checkoutData,\r\n        ),\r\n      );\r\n      if (response.status === 'success' && response.data?.approvalURl) {\r\n        this.toastService.showSuccess(\r\n          'Payment initiated! Redirecting to PayPal...',\r\n        );\r\n        sessionStorage.setItem(\r\n          'checkoutData',\r\n          JSON.stringify({\r\n            ...checkoutData,\r\n            purchaseId: response.data.purchaseId,\r\n            paymentId: response.data.paymentId,\r\n          }),\r\n        );\r\n        window.location.href = response.data.approvalURl; // Redirect to PayPal\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to initiate payment.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Checkout error:', error);\r\n      this.toastService.showError(\r\n        'Checkout failed: ' + (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n  // execute purchase payment\r\n  async executePurchasePayment(\r\n    checkoutData: CheckoutData,\r\n    purchaseId: number,\r\n    paymentId: string,\r\n    payerId: string,\r\n  ): Promise<CheckoutResponse> {\r\n    debugger;\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/payment/execute?paymentId=${paymentId}&PayerID=${payerId}`;\r\n    console.log('Executing payment with URL:', url); // Debug log\r\n    console.log('Payload:', checkoutData); // Debug log\r\n    try {\r\n      const response: CheckoutResponse = await firstValueFrom(\r\n        this.http.post<CheckoutResponse>(url, checkoutData, {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }),\r\n      );\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Payment completed successfully!');\r\n        sessionStorage.removeItem('paymentDetails');\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Payment execution error:', error);\r\n      this.toastService.showError('Payment execution failed: ');\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // handle paypal cancel\r\n  async cancelPurchase(purchaseId: number): Promise<CancelResponse> {\r\n    const token = this.authService.getToken();\r\n    if (!token) {\r\n      this.toastService.showError('Token is missing. Please log in again.');\r\n      throw new Error('No authentication token available');\r\n    }\r\n\r\n    const url = `${this.baseUrl}/purchase/${purchaseId}/cancel`;\r\n    try {\r\n      const response: CancelResponse = await firstValueFrom(\r\n        this.http.post<CancelResponse>(\r\n          url,\r\n          {},\r\n          {\r\n            headers: {\r\n              Authorization: `Bearer ${token}`,\r\n            },\r\n          },\r\n        ),\r\n      );\r\n\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Purchase cancelled successfully!');\r\n      } else {\r\n        this.toastService.showError(\r\n          response.message || 'Failed to cancel purchase.',\r\n        );\r\n      }\r\n      return response;\r\n    } catch (error: any) {\r\n      console.error('Cancel purchase error:', error);\r\n      this.toastService.showError(\r\n        'Failed to cancel purchase: ' +\r\n          (error.error?.message || 'Something went wrong'),\r\n      );\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MainService",
            "id": "injectable-MainService-3116f3d66375d0e5a8eaa2ce165cd11a7c1be2eb6c12d8f2be485400274a46e7fb52de9c030e921df4b1db57acbe59e69adf1ef06dff5ea0e1491fa1d8a58dfa",
            "file": "src/app/Service/main.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "isUserLoggedIn",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CookieService } from 'ngx-cookie-service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MainService {\r\n  constructor(private cookieService: CookieService) {}\r\n  isUserLoggedIn(): boolean {\r\n    const authToken = this.cookieService.get('token');\r\n    return !!authToken; // Returns true if the token exists, false otherwise\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "PdfService",
            "id": "injectable-PdfService-6a1ab95cafe700b87816e4b94df9db76b188c353b88b736076fdc01f4b1035667daecbefc5c6edaf124a961ef0bc5c206aba27d7f9ffbce9764336417127a090",
            "file": "src/app/Service/pdf/pdf.service.ts",
            "properties": [
                {
                    "name": "pdfDocGenerator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "generateVoucherPdf",
                    "args": [
                        {
                            "name": "checkoutData",
                            "type": "CheckoutData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "pdfMake.TCreatedPdf",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkoutData",
                            "type": "CheckoutData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\nimport { TDocumentDefinitions } from 'pdfmake/interfaces';\r\nimport pdfMake from 'pdfmake/build/pdfmake';\r\nimport * as pdfFonts from 'pdfmake/build/vfs_fonts';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PdfService {\r\n  private pdfDocGenerator: typeof pdfMake;\r\n  constructor() {\r\n    this.pdfDocGenerator = pdfMake;\r\n    this.pdfDocGenerator.createPdf; // forces module to load correctly\r\n    this.pdfDocGenerator.vfs = pdfFonts.vfs;\r\n  }\r\n\r\n  generateVoucherPdf(checkoutData: CheckoutData): pdfMake.TCreatedPdf {\r\n    const documentDefinition: TDocumentDefinitions = {\r\n      content: [\r\n        // Header\r\n        { text: 'Purchase Voucher', style: 'header' },\r\n        {\r\n          text: `Customer: ${checkoutData.username}`,\r\n          style: 'subheader',\r\n          margin: [0, 5, 0, 20],\r\n        },\r\n\r\n        // Purchase Details Section\r\n        { text: 'Purchase Details', style: 'subheader', margin: [0, 0, 0, 10] },\r\n        {\r\n          table: {\r\n            headerRows: 1,\r\n            widths: ['*', 'auto', 'auto', 'auto', 'auto'],\r\n            body: [\r\n              ['Item Name', 'Barcode', 'Price', 'Quantity', 'Total'],\r\n              ...checkoutData.cartItems.map((item) => [\r\n                item.name,\r\n                item.barcode,\r\n                `$${item.discountedPrice.toFixed(2)}`,\r\n                item.quantity.toString(), // Ensure consistent string type\r\n                `$${(item.discountedPrice * item.quantity).toFixed(2)}`,\r\n              ]),\r\n            ],\r\n          },\r\n        },\r\n\r\n        // Summary Section\r\n        { text: 'Summary', style: 'subheader', margin: [0, 20, 0, 10] },\r\n        {\r\n          table: {\r\n            widths: ['*', 'auto'],\r\n            body: [\r\n              ['Original Total', `$${checkoutData.originalAmount.toFixed(2)}`],\r\n              ...(checkoutData.couponDiscount\r\n                ? [\r\n                    [\r\n                      'Coupon Discount',\r\n                      `-$${checkoutData.couponDiscount.toFixed(2)}`,\r\n                    ],\r\n                  ]\r\n                : []),\r\n              ...(checkoutData.loyaltyDiscount\r\n                ? [\r\n                    [\r\n                      'Loyalty Discount',\r\n                      `-$${checkoutData.loyaltyDiscount.toFixed(2)}`,\r\n                    ],\r\n                  ]\r\n                : []),\r\n              ...(checkoutData.discountAmount\r\n                ? [\r\n                    [\r\n                      'Total Discount',\r\n                      `-$${checkoutData.discountAmount.toFixed(2)}`,\r\n                    ],\r\n                  ]\r\n                : []),\r\n              ['Subtotal', `$${checkoutData.totalAmount.toFixed(2)}`],\r\n              ['Tax', `$${checkoutData.taxAmount.toFixed(2)}`],\r\n              [\r\n                'Final Amount',\r\n                { text: `$${checkoutData.finalAmount.toFixed(2)}`, bold: true },\r\n              ],\r\n            ],\r\n          },\r\n        },\r\n\r\n        // Transaction Details Section\r\n        {\r\n          text: 'Transaction Details',\r\n          style: 'subheader',\r\n          margin: [0, 20, 0, 10],\r\n        },\r\n        {\r\n          table: {\r\n            widths: ['*', '*'],\r\n            body: [\r\n              ...(checkoutData.purchaseId\r\n                ? [['Purchase ID', checkoutData.purchaseId.toString()]]\r\n                : []),\r\n              ...(checkoutData.paymentId\r\n                ? [['Payment ID', checkoutData.paymentId]]\r\n                : []),\r\n              ...(checkoutData.payerId\r\n                ? [['Payer ID', checkoutData.payerId]]\r\n                : []),\r\n              ...(checkoutData.couponCode\r\n                ? [['Coupon Code', checkoutData.couponCode]]\r\n                : []),\r\n              ...(checkoutData.loyaltyPointsUsed\r\n                ? [\r\n                    [\r\n                      'Loyalty Points Used',\r\n                      checkoutData.loyaltyPointsUsed.toString(),\r\n                    ],\r\n                  ]\r\n                : []),\r\n              ...(checkoutData.pointsEarned !== undefined &&\r\n              checkoutData.pointsEarned !== null\r\n                ? [['Points Earned', checkoutData.pointsEarned.toString()]]\r\n                : []),\r\n              ...(checkoutData.transactionStatus\r\n                ? [['Transaction Status', checkoutData.transactionStatus]]\r\n                : []),\r\n              ...(checkoutData.approvalURl\r\n                ? [['Approval URL', checkoutData.approvalURl]]\r\n                : []),\r\n            ],\r\n          },\r\n        },\r\n      ],\r\n      styles: {\r\n        header: {\r\n          fontSize: 22,\r\n          bold: true,\r\n          alignment: 'center',\r\n          margin: [0, 0, 0, 10],\r\n        },\r\n        subheader: { fontSize: 16, bold: true },\r\n      },\r\n      defaultStyle: { fontSize: 12 },\r\n      pageSize: 'A4',\r\n      footer: (currentPage: number, pageCount: number) => ({\r\n        text: `Page ${currentPage} of ${pageCount}`,\r\n        alignment: 'center',\r\n        fontSize: 10,\r\n        margin: [0, 10, 0, 0],\r\n      }),\r\n    };\r\n\r\n    return pdfMake.createPdf(documentDefinition);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProductService",
            "id": "injectable-ProductService-d6d821def18dd5caa1f16cbb7ad390595ca1f3e4ba10f0b44891f9eaa7727b4788eae6b527c29136c2d5644ee2cd9e2681107bc6a77aa81e4ace70cbceba3d55",
            "file": "src/app/customer/apiService/productService/product.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/product'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getProductByBarcode",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProductService {\r\n  private apiUrl = '/product';\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getProductByBarcode(barcode: string): Observable<any> {\r\n    const url = `${this.apiUrl}/search/${barcode}`;\r\n    const response = this.http.get<any>(url);\r\n    return response;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-9c2fefa68b2123b8642635ea4de1cb47ae71bee58277b9b75f7ef7fa31005955a3356b52e116d1d01b60cdf7e19c49f823e09fc1504c421badd6ae95b885d3c2",
            "file": "src/app/Service/toast/toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Error'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Error'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInfo",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Info'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Info'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Success'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Success'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Warning'"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'Warning'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { ToastrService } from 'ngx-toastr';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToastService {\r\n  constructor(private toastr: ToastrService) {}\r\n  showSuccess(message: string, title: string = 'Success'): void {\r\n    this.toastr.success(message, title, {\r\n      positionClass: 'toast-top-right',\r\n      closeButton: false,\r\n      timeOut: 5000,\r\n      progressBar: true,\r\n      extendedTimeOut: 2000, // Stay visible for 2 more seconds after hover\r\n      tapToDismiss: true, // Dismiss on click\r\n    });\r\n  }\r\n\r\n  showError(message: string, title: string = 'Error'): void {\r\n    this.toastr.error(message, title, {\r\n      positionClass: 'toast-top-right',\r\n      closeButton: true,\r\n      timeOut: 5000,\r\n      progressBar: true,\r\n      extendedTimeOut: 2000, // Stay visible for 2 more seconds after hover\r\n      // tapToDismiss: true, // Dismiss on click\r\n    });\r\n  }\r\n\r\n  showWarning(message: string, title: string = 'Warning'): void {\r\n    this.toastr.warning(message, title, {\r\n      positionClass: 'toast-top-right',\r\n      closeButton: true,\r\n      timeOut: 5000,\r\n      progressBar: true,\r\n      extendedTimeOut: 2000, // Stay visible for 2 more seconds after hover\r\n      // tapToDismiss: true, // Dismiss on click\r\n    });\r\n  }\r\n\r\n  showInfo(message: string, title: string = 'Info'): void {\r\n    this.toastr.info(message, title, {\r\n      positionClass: 'toast-top-right',\r\n      closeButton: true,\r\n      timeOut: 5000,\r\n      progressBar: true,\r\n      extendedTimeOut: 2000, // Stay visible for 2 more seconds after hover\r\n      // tapToDismiss: true, // Dismiss on click\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AdminLayoutsComponent",
            "id": "component-AdminLayoutsComponent-050c600d0edb84fb0e094b8e90abd5dc7d545d561a7ec64c4f5c4d8d4460e5e089ee61526a6794a833ea384d5c922e3647767df3e843554a50ef3f68f24ee731",
            "file": "src/app/staff/Components/admin-layouts/admin-layouts.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-admin-layouts",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./admin-layouts.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { SidebarComponent } from '../sidebar/sidebar.component';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-layouts',\r\n  imports: [SidebarComponent, RouterOutlet],\r\n  templateUrl: './admin-layouts.component.html',\r\n  styleUrl: './admin-layouts.component.css',\r\n})\r\nexport class AdminLayoutsComponent {\r\n  // constructor(private authService: AuthService) {}\r\n  // role: string[] | undefined;\r\n  // isAdmin: boolean | undefined;\r\n  // sidebarRole: string = 'guest'; // Default role\r\n  // ngOnInit(): void {\r\n  //   this.role = this.authService.getRoles();\r\n  //   this.isAdmin = this.role?.includes('admin') || false;\r\n  //   // Determine the sidebar role based on the user's roles\r\n  //   if (this.isAdmin) {\r\n  //     this.sidebarRole = 'admin';\r\n  //   } else if (this.role?.includes('user')) {\r\n  //     this.sidebarRole = 'user';\r\n  //   } else {\r\n  //     this.sidebarRole = 'guest';\r\n  //   }\r\n  // }\r\n}\r\n",
            "styleUrl": "./admin-layouts.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"layout-container\">\r\n  <app-sidebar></app-sidebar>\r\n  <div class=\"content-area\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-11487edd701ce1b800dccc31e61dbbca0746c991bdc79aab82b47f710ffd359c3f847998301840621ff39e6fca2e27116571cc8ac86952f34e104e26e615b7d9",
            "file": "src/app/app.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'Cloudy_SelfCheckout_Angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "isCustomerPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isStaffPage",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\nimport { Router, RouterOutlet } from '@angular/router';\r\nimport { HeaderComponent } from './customer/Components/header/header.component';\r\nimport { FooterComponent } from './customer/Components/footer/footer.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  imports: [\r\n    RouterOutlet,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    MatButtonModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class AppComponent {\r\n  title = 'Cloudy_SelfCheckout_Angular';\r\n  constructor(private router: Router) {}\r\n  isCustomerPage(): boolean {\r\n    return (\r\n      this.router.url.startsWith('/home') ||\r\n      this.router.url === '/' ||\r\n      this.router.url.startsWith('/scan') ||\r\n      this.router.url.startsWith('/product') ||\r\n      this.router.url.startsWith('/cart')\r\n    );\r\n  }\r\n\r\n  isStaffPage(): boolean {\r\n    return this.router.url.startsWith('/staff');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div *ngIf=\"isCustomerPage()\">\r\n  <app-header></app-header>\r\n  <router-outlet></router-outlet>\r\n  <app-footer></app-footer>\r\n</div>\r\n<div *ngIf=\"isStaffPage()\" class=\"admin-layout\">\r\n  <div class=\"admin-content\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</div>\r\n<ng-template #defaultLayout>\r\n  <router-outlet></router-outlet>\r\n</ng-template>\r\n"
        },
        {
            "name": "BannerComponent",
            "id": "component-BannerComponent-51d0c14dcf7614448d7a404a9e9a7a51f5cd55b5379291c6c17848740a1c0aba9645353ffb6ecdbf6742401b217d0cc0d10a0eec91cfc8ff10979de9d493794c",
            "file": "src/app/customer/Components/bannerComponent/banner/banner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-banner",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./banner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bannerImg",
                    "defaultValue": "'assets/undraw_shopping_a55o.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-banner',\r\n  imports: [CommonModule],\r\n  templateUrl: './banner.component.html',\r\n  styleUrl: './banner.component.css',\r\n})\r\nexport class BannerComponent {\r\n  bannerImg = 'assets/undraw_shopping_a55o.svg';\r\n}\r\n",
            "styleUrl": "./banner.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"banner-container container-fluid\">\r\n  <div class=\"row\">\r\n    <div class=\"col-lg-6 left_banner_container\">\r\n      <div\r\n        class=\"banner_pic_container container-fluid\"\r\n        style=\"background-color: rgb(219, 195, 195)\"\r\n      >\r\n        <img [src]=\"bannerImg\" alt=\"Optimized SVG\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-lg-6 right_banner_container\">\r\n      <div class=\"scan_btn_container container-fluid\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "BarcodeScannerComponent",
            "id": "component-BarcodeScannerComponent-03d336fefc6a0416c1537b0d515815d4b4c3f38fe73e9d02bde976d9b53ee444a866a1948273e94999709c7c44f42db749020f06f5df320465d160a3a0459391",
            "file": "src/app/customer/Components/product/barcode-scanner/barcode-scanner.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-barcode-scanner",
            "styleUrls": [
                "./barcode-scanner.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./barcode-scanner.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "canvasContext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanvasRenderingContext2D | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "canvasElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLCanvasElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "codeReader",
                    "defaultValue": "new BrowserMultiFormatReader()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scannedBarcode",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "stream",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MediaStream",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "videoElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLVideoElement",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "captureSnapshot",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "decodeBarcodeFromImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "HTMLImageElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "HTMLImageElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchProduct",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startCamera",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "stopCamera",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { BrowserMultiFormatReader, Result } from '@zxing/library';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-barcode-scanner',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './barcode-scanner.component.html',\r\n  styleUrls: ['./barcode-scanner.component.css'],\r\n})\r\nexport class BarcodeScannerComponent implements OnInit, OnDestroy {\r\n  scannedBarcode: string = ''; // Store scanned barcode result\r\n  private codeReader = new BrowserMultiFormatReader();\r\n  private videoElement!: HTMLVideoElement;\r\n  private canvasElement!: HTMLCanvasElement;\r\n  private canvasContext!: CanvasRenderingContext2D | null;\r\n  private stream!: MediaStream;\r\n\r\n  constructor(\r\n    private toastService: ToastService,\r\n    private http: HttpClient,\r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.startCamera();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.stopCamera();\r\n  }\r\n\r\n  // Start the camera\r\n  startCamera(): void {\r\n    navigator.mediaDevices\r\n      .getUserMedia({ video: { facingMode: 'environment' } })\r\n      .then((stream) => {\r\n        this.stream = stream;\r\n        this.videoElement = document.createElement('video');\r\n        this.videoElement.srcObject = stream;\r\n        this.videoElement.setAttribute('playsinline', 'true'); // iOS support\r\n        this.videoElement.autoplay = true;\r\n\r\n        // Append video element to container\r\n        const videoContainer = document.getElementById('video-container');\r\n        if (videoContainer) {\r\n          videoContainer.innerHTML = ''; // Clear previous content\r\n          videoContainer.appendChild(this.videoElement);\r\n        }\r\n\r\n        // Create canvas for capturing images\r\n        this.canvasElement = document.createElement('canvas');\r\n        this.canvasContext = this.canvasElement.getContext('2d');\r\n      })\r\n      .catch((error) => {\r\n        this.toastService.showError('Error accessing camera.');\r\n        console.error('Error accessing camera:', error);\r\n      });\r\n  }\r\n\r\n  // Capture a snapshot from the video feed\r\n  captureSnapshot(): void {\r\n    if (!this.videoElement || !this.canvasElement || !this.canvasContext) {\r\n      this.toastService.showError('Camera or canvas is not initialized.');\r\n      return;\r\n    }\r\n\r\n    // Set canvas size to match video dimensions\r\n    this.canvasElement.width = this.videoElement.videoWidth;\r\n    this.canvasElement.height = this.videoElement.videoHeight;\r\n\r\n    // Draw the current video frame onto the canvas\r\n    this.canvasContext.drawImage(\r\n      this.videoElement,\r\n      0,\r\n      0,\r\n      this.canvasElement.width,\r\n      this.canvasElement.height\r\n    );\r\n\r\n    // Convert canvas to an image element\r\n    const image = new Image();\r\n    image.src = this.canvasElement.toDataURL('image/png');\r\n\r\n    // Wait for the image to load\r\n    image.onload = () => {\r\n      this.decodeBarcodeFromImage(image);\r\n    };\r\n  }\r\n\r\n  // Decode barcode from the captured image\r\n  decodeBarcodeFromImage(image: HTMLImageElement): void {\r\n    this.codeReader\r\n      .decodeFromImage(image)\r\n      .then((result: Result) => {\r\n        let scannedResult = result.getText().trim();\r\n\r\n        // Check if barcode is 12 digits (UPC-A) and force conversion to 13 digits (EAN-13)\r\n        if (scannedResult.length === 12) {\r\n          scannedResult = '0' + scannedResult; // Add leading zero\r\n        }\r\n\r\n        this.scannedBarcode = scannedResult; // Store the fixed barcode\r\n        this.toastService.showSuccess('Barcode scanned successfully!');\r\n        this.stopCamera(); // Stop the camera after successful scan\r\n        console.log('Scanned Barcode:', this.scannedBarcode);\r\n      })\r\n      .catch((error: any) => {\r\n        console.error('No barcode detected:', error);\r\n        this.scannedBarcode = 'No barcode detected';\r\n        this.toastService.showError('No barcode detected. Please try again.');\r\n      });\r\n  }\r\n\r\n  // Stop the camera when component is destroyed\r\n  stopCamera(): void {\r\n    if (this.stream) {\r\n      this.stream.getTracks().forEach((track) => track.stop());\r\n    }\r\n  }\r\n  /////////////////////////////////////////;\r\n  //After barcode -> Show details of the product\r\n  searchProduct(barcode: string): void {\r\n    barcode = barcode.trim();\r\n    const apiUrl = `/product/search/${encodeURIComponent(barcode)}`;\r\n    console.log('API URL:', apiUrl);\r\n\r\n    this.http.get(apiUrl).subscribe({\r\n      next: (product: any) => {\r\n        if (product) {\r\n          // Show product details\r\n          // this.toastService.showSuccess(\r\n          //   'Product found!Redirecting to product details page...'\r\n          // );\r\n          // this.toastService.showInfo('Product details: ' + JSON.stringify(product));\r\n          this.router.navigate([`/product/search/${barcode}`], {\r\n            state: { productDetails: product },\r\n          });\r\n        } else {\r\n          this.toastService.showWarning('Product not found.');\r\n        }\r\n      },\r\n      error: () => {\r\n        this.toastService.showError('Error fetching product details.');\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".scanner-container {\r\n  text-align: center;\r\n  margin: 20px;\r\n}\r\n\r\n.video-container {\r\n  margin: 20px auto;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  border: 2px solid #ccc;\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\nbutton {\r\n  margin: 20px 0;\r\n  padding: 10px 20px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.result {\r\n  margin-top: 20px;\r\n  font-size: 18px;\r\n}\r\n\r\n.result p {\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./barcode-scanner.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"scanner-container\">\r\n  <h2>Barcode Scanner</h2>\r\n\r\n  <!-- Video Feed -->\r\n  <div id=\"video-container\" class=\"video-container\"></div>\r\n\r\n  <!-- Capture Snapshot Button -->\r\n  <button (click)=\"captureSnapshot()\">Capture & Scan</button>\r\n\r\n  <!-- Display Scanned Barcode -->\r\n  <div *ngIf=\"scannedBarcode\" class=\"result\">\r\n    <h3>Scanned Barcode:</h3>\r\n    <p>{{ scannedBarcode }}</p>\r\n  </div>\r\n  <button (click)=\"searchProduct(scannedBarcode)\" [disabled]=\"!scannedBarcode\">\r\n    Next\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "CartComponent",
            "id": "component-CartComponent-ac7e1514434ac25486c75cc2b9936b805b67abbd97ae5a42b0dd814f31456b2721ead37c7d0e2e09e3ea7e0aaf9cd0ed992d1953610d2030a02c1786bfe65795",
            "file": "src/app/customer/Components/Purchase/cart/cart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cart",
            "styleUrls": [
                "./cart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_formBuilder",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cartFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 110
                },
                {
                    "name": "cartTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "checkoutData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CheckoutData | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 101
                },
                {
                    "name": "checkOutFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<CartItemDisplay>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 95
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "[\r\n    'productName',\r\n    'originalPrice',\r\n    'discountedPrice',\r\n    'quantity',\r\n    'total',\r\n    'actions',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "isLinear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 100
                },
                {
                    "name": "originalTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 105,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "paymentFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "purchaseData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "stepper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatStepper",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 106,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'stepper'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "'Your Cart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "totalCounts",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [
                {
                    "name": "clearCart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePaymentCancelled",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handlePaymentExecuted",
                    "args": [
                        {
                            "name": "purchaseData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "purchaseData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePaymentInitiated",
                    "args": [
                        {
                            "name": "checkoutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "checkoutData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handlePaypalRedirect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeFromCart",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "scan",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateQuantity",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "QuantitySelectorComponent",
                    "type": "component"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "CheckoutComponent",
                    "type": "component"
                },
                {
                    "name": "PaypalReturnComponent",
                    "type": "component"
                },
                {
                    "name": "VoucherComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  OnInit,\r\n  AfterViewInit,\r\n  ViewChild,\r\n  inject,\r\n  ChangeDetectorRef,\r\n} from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { CartService } from '../../../apiService/cartService/cart.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { CommonModule } from '@angular/common';\r\nimport { QuantitySelectorComponent } from './../../../../Common/quantity-selector/quantity-selector.component';\r\nimport {\r\n  trigger,\r\n  state,\r\n  style,\r\n  animate,\r\n  transition,\r\n} from '@angular/animations';\r\nimport { CartItemDisplay } from 'app/customer/Model/cart/cart-item-display';\r\nimport { MatStepper, MatStepperModule } from '@angular/material/stepper';\r\nimport { SkeletonLoaderComponent } from 'app/Common/components/skeleton-loader/skeleton-loader.component';\r\nimport { CheckoutComponent } from '../check-out/check-out.component';\r\nimport { PaypalReturnComponent } from '../paypal/paypal-return/paypal-return.component';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\nimport { VoucherComponent } from '../voucher/voucher/voucher.component';\r\n\r\n@Component({\r\n  selector: 'app-cart',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    QuantitySelectorComponent,\r\n    CommonModule,\r\n    MatStepperModule,\r\n    CheckoutComponent,\r\n    PaypalReturnComponent,\r\n    VoucherComponent,\r\n  ],\r\n  templateUrl: './cart.component.html',\r\n  styleUrls: ['./cart.component.css'],\r\n  animations: [\r\n    trigger('fadeIn', [\r\n      state('void', style({ opacity: 0, transform: 'translateY(20px)' })),\r\n      transition(':enter', [\r\n        animate(\r\n          '600ms ease-out',\r\n          style({ opacity: 1, transform: 'translateY(0)' }),\r\n        ),\r\n      ]),\r\n    ]),\r\n    trigger('hoverEffect', [\r\n      state('normal', style({ transform: 'scale(1)' })),\r\n      state(\r\n        'hovered',\r\n        style({\r\n          transform: 'scale(1.02)',\r\n          boxShadow: '0 4px 15px rgba(0,0,0,0.2)',\r\n        }),\r\n      ),\r\n      transition('normal <=> hovered', animate('200ms ease-in-out')),\r\n    ]),\r\n  ],\r\n})\r\nexport class CartComponent implements OnInit, AfterViewInit {\r\n  displayedColumns: string[] = [\r\n    'productName',\r\n    'originalPrice',\r\n    'discountedPrice',\r\n    'quantity',\r\n    'total',\r\n    'actions',\r\n  ];\r\n  dataSource = new MatTableDataSource<CartItemDisplay>();\r\n  cartTotal: number = 0;\r\n  originalTotal: number = 0;\r\n  totalCounts: number = 0;\r\n  title = 'Your Cart';\r\n  isLinear = true; // Set to true to enforce linear navigation\r\n  checkoutData: CheckoutData | undefined;\r\n  purchaseData: any;\r\n\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  @ViewChild('stepper') stepper!: MatStepper;\r\n\r\n  private _formBuilder = inject(FormBuilder);\r\n  private cdr = inject(ChangeDetectorRef);\r\n  cartFormGroup: FormGroup;\r\n  checkOutFormGroup: FormGroup;\r\n  paymentFormGroup: FormGroup;\r\n\r\n  constructor(\r\n    private cartService: CartService,\r\n    private toastService: ToastService,\r\n    private router: Router,\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    // Initialize form groups\r\n    this.cartFormGroup = this.fb.group({});\r\n    this.checkOutFormGroup = this.fb.group({\r\n      couponCode: [''],\r\n      loyaltyPoints: [''],\r\n    });\r\n    this.paymentFormGroup = this.fb.group({});\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.cartService.cartItems$.subscribe((items) => {\r\n      this.dataSource.data = items;\r\n      this.cartTotal = this.cartService.calculateCartTotals().totalAmount;\r\n      this.totalCounts = this.cartService.getTotalItemCounts();\r\n      this.cdr.detectChanges();\r\n    });\r\n    // Check for PayPal redirect\r\n    this.route.queryParams.subscribe((params) => {\r\n      if (params['purchaseId'] && params['paymentId'] && params['PayerID']) {\r\n        this.handlePaypalRedirect();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sortingDataAccessor = (item, property) => {\r\n      switch (property) {\r\n        case 'total':\r\n          return item.discountedPrice * item.cartQuantity;\r\n        default:\r\n          return (item as any)[property];\r\n      }\r\n    };\r\n  }\r\n\r\n  async updateQuantity(barcode: string, quantity: number): Promise<void> {\r\n    try {\r\n      await this.cartService.updateCartItemQuantity(barcode, quantity);\r\n    } catch (error) {\r\n      this.toastService.showError('Error updating quantity');\r\n      console.error('Error updating quantity:', error);\r\n    }\r\n  }\r\n\r\n  removeFromCart(barcode: string): void {\r\n    try {\r\n      this.cartService.removeFromCart(barcode);\r\n    } catch (error) {\r\n      this.toastService.showError('Error removing item');\r\n      console.error('Error in removeFromCart:', error);\r\n    }\r\n  }\r\n\r\n  clearCart(): void {\r\n    try {\r\n      this.cartService.clearCart();\r\n    } catch (error) {\r\n      this.toastService.showError('Error clearing cart');\r\n      console.error('Error in clearCart:', error);\r\n    }\r\n  }\r\n\r\n  scan(): void {\r\n    this.router.navigate(['/scan']);\r\n  }\r\n  handlePaymentInitiated(checkoutData: any): void {\r\n    this.checkoutData = checkoutData;\r\n  }\r\n\r\n  handlePaymentExecuted(purchaseData: any): void {\r\n    this.purchaseData = purchaseData;\r\n    this.checkoutData = purchaseData;\r\n    this.cartService.clearCart();\r\n    this.stepper.selectedIndex = 3; // Move to Done step\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  handlePaymentCancelled(): void {\r\n    this.stepper.selectedIndex = 0; // Move back to Cart step (index 0)\r\n    this.cdr.detectChanges();\r\n    this.router.navigate(['/cart']); // Update URL to reflect Cart step\r\n  }\r\n  private handlePaypalRedirect(): void {\r\n    const storedCheckout = sessionStorage.getItem('checkoutData');\r\n    if (storedCheckout) {\r\n      this.checkoutData = JSON.parse(storedCheckout);\r\n      setTimeout(() => {\r\n        this.stepper.selectedIndex = 2; // Move to Payment step (index 2)\r\n        this.cdr.detectChanges();\r\n      }, 0);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* General Reset */\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* Container Styling */\r\n.cart_container_fluid {\r\n  padding: 20px;\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  background: #fff;\r\n  font-family: \"Arial\", sans-serif;\r\n}\r\n\r\n/* Header */\r\n.header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.brand-logo {\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: #333;\r\n}\r\n\r\n.cart-icon {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\n.cart-count {\r\n  background: #ff5a5f;\r\n  color: #fff;\r\n  border-radius: 50%;\r\n  padding: 2px 6px;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n/* Stepper */\r\n.stepper-container {\r\n  margin-bottom: 20px;\r\n}\r\n\r\nmat-stepper {\r\n  background: transparent;\r\n}\r\n\r\n/* Cart Items */\r\n.cart-items {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.cart-header {\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  font-weight: bold;\r\n  color: #333;\r\n  text-transform: uppercase;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.cart-item {\r\n  display: grid;\r\n  grid-template-columns: 2fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  align-items: center;\r\n  padding: 15px 0;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n\r\n.item-details {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 15px;\r\n}\r\n\r\n.item-image {\r\n  width: 60px;\r\n  height: 60px;\r\n  object-fit: cover;\r\n  border-radius: 4px;\r\n}\r\n\r\n.item-info {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.item-name {\r\n  font-size: 1rem;\r\n  color: #333;\r\n}\r\n\r\n.item-subtext {\r\n  font-size: 0.8rem;\r\n  color: #777;\r\n  text-decoration: underline;\r\n  cursor: pointer;\r\n}\r\n\r\n.item-price,\r\n.item-discount,\r\n.item-total {\r\n  font-size: 1rem;\r\n  color: #333;\r\n}\r\n\r\n.price-text {\r\n  font-weight: 500;\r\n}\r\n\r\n.strikethrough {\r\n  text-decoration: line-through;\r\n  color: #777;\r\n}\r\n\r\n.discount-text {\r\n  color: #ff5a5f;\r\n  font-weight: 500;\r\n}\r\n\r\n.item-quantity {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\napp-quantity-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n}\r\n\r\napp-quantity-selector button {\r\n  background: #f5f5f5;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 50%;\r\n  width: 24px;\r\n  height: 24px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n}\r\n\r\napp-quantity-selector span {\r\n  width: 20px;\r\n  text-align: center;\r\n}\r\n\r\n.item-actions {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\n\r\n.remove-btn mat-icon {\r\n  color: #777;\r\n}\r\n\r\n/* Pagination */\r\nmat-paginator {\r\n  background: transparent;\r\n  padding: 10px 0;\r\n  font-size: 0.9rem;\r\n  color: #333;\r\n}\r\n\r\n/* Summary and Actions */\r\n.cart-footer {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: flex-start;\r\n  gap: 20px;\r\n  margin-top: 20px;\r\n}\r\n\r\n.summary-container {\r\n  flex: 1;\r\n  text-align: right;\r\n}\r\n\r\n.summary-row {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  gap: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.summary-label {\r\n  font-size: 1.1rem;\r\n  color: #333;\r\n  font-weight: bold;\r\n}\r\n\r\n.summary-value {\r\n  font-size: 1.2rem;\r\n  color: #333;\r\n  font-weight: bold;\r\n}\r\n\r\n.summary-note {\r\n  font-size: 0.9rem;\r\n  color: #777;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.clear-cart-btn {\r\n  background: transparent;\r\n  color: #ff5a5f;\r\n  border: 1px solid #ff5a5f;\r\n  padding: 8px 16px;\r\n  font-size: 0.9rem;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.clear-cart-btn:hover {\r\n  background: #ff5a5f;\r\n  color: #fff;\r\n}\r\n\r\n/* Action Buttons */\r\n.action-buttons {\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.add-more-btn,\r\n.checkout-btn {\r\n  padding: 12px 20px;\r\n  font-size: 1rem;\r\n  border-radius: 4px;\r\n  transition: all 0.3s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.add-more-btn {\r\n  background: #f5f5f5;\r\n  color: #333;\r\n  border: 1px solid #e0e0e0;\r\n}\r\n\r\n.add-more-btn:hover {\r\n  background: #e0e0e0;\r\n}\r\n\r\n.checkout-btn {\r\n  background: #ff5a5f;\r\n  color: #fff;\r\n  border: none;\r\n}\r\n\r\n.checkout-btn:hover {\r\n  background: #e04e53;\r\n}\r\n\r\n/* Disable future steps based on the current step */\r\nmat-stepper[ng-reflect-selected-index=\"0\"]\r\n  .mat-step-header[ng-reflect-index=\"1\"],\r\nmat-stepper[ng-reflect-selected-index=\"0\"]\r\n  .mat-step-header[ng-reflect-index=\"2\"],\r\nmat-stepper[ng-reflect-selected-index=\"0\"]\r\n  .mat-step-header[ng-reflect-index=\"3\"],\r\nmat-stepper[ng-reflect-selected-index=\"1\"]\r\n  .mat-step-header[ng-reflect-index=\"2\"],\r\nmat-stepper[ng-reflect-selected-index=\"1\"]\r\n  .mat-step-header[ng-reflect-index=\"3\"],\r\nmat-stepper[ng-reflect-selected-index=\"2\"]\r\n  .mat-step-header[ng-reflect-index=\"3\"] {\r\n  opacity: 0.5; /* Visually indicate the step is disabled */\r\n}\r\n\r\n/* Ensure previous and current steps are clickable */\r\nmat-stepper[ng-reflect-selected-index=\"1\"]\r\n  .mat-step-header[ng-reflect-index=\"0\"],\r\nmat-stepper[ng-reflect-selected-index=\"2\"]\r\n  .mat-step-header[ng-reflect-index=\"0\"],\r\nmat-stepper[ng-reflect-selected-index=\"2\"]\r\n  .mat-step-header[ng-reflect-index=\"1\"],\r\nmat-stepper[ng-reflect-selected-index=\"3\"]\r\n  .mat-step-header[ng-reflect-index=\"0\"],\r\nmat-stepper[ng-reflect-selected-index=\"3\"]\r\n  .mat-step-header[ng-reflect-index=\"1\"],\r\nmat-stepper[ng-reflect-selected-index=\"3\"]\r\n  .mat-step-header[ng-reflect-index=\"2\"] {\r\n  pointer-events: auto;\r\n  opacity: 1;\r\n}\r\n/* Responsive Adjustments */\r\n@media (max-width: 768px) {\r\n  .cart_container_fluid {\r\n    padding: 15px;\r\n  }\r\n\r\n  .cart-header,\r\n  .cart-item {\r\n    grid-template-columns: 2fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  }\r\n\r\n  .item-image {\r\n    width: 50px;\r\n    height: 50px;\r\n  }\r\n\r\n  .cart-footer {\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  .summary-container {\r\n    text-align: center;\r\n  }\r\n\r\n  .summary-row {\r\n    justify-content: center;\r\n  }\r\n\r\n  .action-buttons {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .add-more-btn,\r\n  .checkout-btn {\r\n    width: 100%;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .cart-header {\r\n    display: none;\r\n  }\r\n\r\n  .cart-item {\r\n    grid-template-columns: 1fr;\r\n    gap: 10px;\r\n    padding: 10px;\r\n    border: 1px solid #e0e0e0;\r\n    border-radius: 4px;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .item-details {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n  }\r\n\r\n  .item-image {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n\r\n  .item-price,\r\n  .item-discount,\r\n  .item-quantity,\r\n  .item-total,\r\n  .item-actions {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n\r\n  .item-price::before {\r\n    content: \"Price: \";\r\n    font-weight: bold;\r\n  }\r\n\r\n  .item-discount::before {\r\n    content: \"Discount: \";\r\n    font-weight: bold;\r\n  }\r\n\r\n  .item-quantity::before {\r\n    content: \"Quantity: \";\r\n    font-weight: bold;\r\n  }\r\n\r\n  .item-total::before {\r\n    content: \"Total: \";\r\n    font-weight: bold;\r\n  }\r\n}\r\n",
                    "styleUrl": "./cart.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 112,
                "jsdoctags": [
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"cart_container_fluid\">\r\n  <!-- Header with Branding -->\r\n  <header class=\"header\">\r\n    <div class=\"brand-logo\">Your Brand</div>\r\n    <div class=\"cart-icon\">\r\n      <mat-icon>shopping_cart</mat-icon>\r\n      <span class=\"cart-count\">{{ totalCounts }}</span>\r\n    </div>\r\n  </header>\r\n\r\n  <!-- Stepper -->\r\n  <div class=\"stepper-container\">\r\n    <mat-stepper [linear]=\"isLinear\" #stepper>\r\n      <mat-step\r\n        [stepControl]=\"cartFormGroup\"\r\n        [completed]=\"true\"\r\n        [editable]=\"false\"\r\n      >\r\n        <ng-template matStepLabel>Your Cart</ng-template>\r\n        <form [formGroup]=\"cartFormGroup\">\r\n          <!-- Cart Items -->\r\n          <div class=\"cart-items\">\r\n            <div class=\"cart-header\">\r\n              <span>Product</span>\r\n              <span>Price</span>\r\n              <span>Discount</span>\r\n              <span>Quantity</span>\r\n              <span>Total</span>\r\n              <span></span>\r\n            </div>\r\n\r\n            <div class=\"cart-item\" *ngFor=\"let item of dataSource.data\">\r\n              <div class=\"item-details\">\r\n                <!-- <img\r\n                  [src]=\"item.imageUrl || 'assets/placeholder.png'\"\r\n                  alt=\"{{ item.productName }}\"\r\n                  class=\"item-image\"\r\n                /> -->\r\n                <div class=\"item-info\">\r\n                  <span class=\"item-name\">{{ item.productName }}</span>\r\n                  <span class=\"item-subtext\">Details</span>\r\n                </div>\r\n              </div>\r\n              <div class=\"item-price\">\r\n                <span\r\n                  [class.strikethrough]=\"item.hasDiscount\"\r\n                  class=\"price-text\"\r\n                >\r\n                  {{ item.price | currency: item.currency }}\r\n                </span>\r\n              </div>\r\n              <div class=\"item-discount\">\r\n                <span *ngIf=\"item.hasDiscount\" class=\"discount-text\">\r\n                  {{ item.discountedPrice | currency: item.currency }}\r\n                </span>\r\n              </div>\r\n              <div class=\"item-quantity\">\r\n                <app-quantity-selector\r\n                  [count]=\"item.cartQuantity\"\r\n                  (countChange)=\"updateQuantity(item.barcode, $event)\"\r\n                ></app-quantity-selector>\r\n              </div>\r\n              <div class=\"item-total\">\r\n                {{\r\n                  item.discountedPrice * item.cartQuantity\r\n                    | currency: item.currency\r\n                }}\r\n              </div>\r\n              <div class=\"item-actions\">\r\n                <button\r\n                  mat-icon-button\r\n                  color=\"warn\"\r\n                  (click)=\"removeFromCart(item.barcode)\"\r\n                  class=\"remove-btn\"\r\n                >\r\n                  <mat-icon>delete</mat-icon>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Pagination -->\r\n          <mat-paginator\r\n            [pageSizeOptions]=\"[5, 10, 20]\"\r\n            showFirstLastButtons\r\n            aria-label=\"Select page of cart items\"\r\n          ></mat-paginator>\r\n\r\n          <!-- Summary and Actions -->\r\n          <div class=\"cart-footer\">\r\n            <div class=\"summary-container\">\r\n              <div class=\"summary-row\">\r\n                <span class=\"summary-label\">Subtotal</span>\r\n                <span class=\"summary-value\">{{\r\n                  cartTotal | currency: \"MMK\"\r\n                }}</span>\r\n              </div>\r\n              <p class=\"summary-note\">\r\n                Taxes and shipping calculated at checkout\r\n              </p>\r\n              <button\r\n                mat-raised-button\r\n                color=\"warn\"\r\n                (click)=\"clearCart()\"\r\n                class=\"clear-cart-btn\"\r\n              >\r\n                Clear Cart\r\n              </button>\r\n            </div>\r\n\r\n            <div class=\"action-buttons\">\r\n              <button\r\n                mat-raised-button\r\n                color=\"accent\"\r\n                (click)=\"scan()\"\r\n                class=\"add-more-btn\"\r\n              >\r\n                <mat-icon>add</mat-icon> Add More Items\r\n              </button>\r\n              <button\r\n                mat-raised-button\r\n                color=\"primary\"\r\n                matStepperNext\r\n                class=\"checkout-btn\"\r\n              >\r\n                Checkout\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </mat-step>\r\n\r\n      <!-- Checkout Step -->\r\n      <mat-step\r\n        [stepControl]=\"checkOutFormGroup\"\r\n        label=\"Checkout\"\r\n        [completed]=\"checkoutData !== undefined\"\r\n        [editable]=\"false\"\r\n      >\r\n        <ng-template matStepContent>\r\n          <app-check-out (backToCart)=\"stepper.previous()\"> </app-check-out>\r\n        </ng-template>\r\n      </mat-step>\r\n      <!-- Payment Step -->\r\n      <mat-step\r\n        [stepControl]=\"paymentFormGroup\"\r\n        label=\"Payment\"\r\n        [completed]=\"purchaseData !== undefined\"\r\n        [editable]=\"false\"\r\n      >\r\n        <ng-template matStepContent>\r\n          <app-paypal-return\r\n            [checkoutData]=\"checkoutData!\"\r\n            (backToCheckout)=\"stepper.previous()\"\r\n            (paymentExecuted)=\"handlePaymentExecuted($event)\"\r\n            (paymentCancelled)=\"handlePaymentCancelled()\"\r\n          ></app-paypal-return>\r\n        </ng-template>\r\n      </mat-step>\r\n\r\n      <!-- Done Step -->\r\n      <mat-step [completed]=\"true\" [editable]=\"false\">\r\n        <ng-template matStepLabel>Voucher</ng-template>\r\n        <p>Thank you for your purchase!</p>\r\n        <div class=\"done-step\">\r\n          <p>Thank you for your purchase!</p>\r\n          <app-voucher\r\n            [checkoutData]=\"checkoutData!\"\r\n            *ngIf=\"checkoutData\"\r\n          ></app-voucher>\r\n          <div class=\"action-buttons\">\r\n            <button mat-button (click)=\"stepper.reset(); clearCart()\">\r\n              Start Over\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </mat-step>\r\n    </mat-stepper>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "CheckoutComponent",
            "id": "component-CheckoutComponent-52d1d9fc060e2d98b519a04df122d6dfc590592db760f5ab4631a603b6e63d11efbc96f4e6ef099b4c4795957f67e7d1f7274a9b292af9c50415e1c7dcc4e398",
            "file": "src/app/customer/Components/Purchase/check-out/check-out.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-check-out",
            "styleUrls": [
                "./check-out.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./check-out.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "backToCart",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "EventEmitter"
                },
                {
                    "name": "paymentInitiated",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "cartTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "checkoutData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "checkOutFormGroup",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "couponDiscount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "dataSource",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "grandTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "isPaymentInitiated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "loyaltyDiscount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "originalTotal",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "taxAmount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "userLoyaltyPoints",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "username",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                }
            ],
            "methodsClass": [
                {
                    "name": "applyCoupon",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "applyLoyaltyPoints",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "catch",
                    "args": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkPaymentStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initiatePurchase",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "updateTotals",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatStepperModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { CartService } from 'app/customer/apiService/cartService/cart.service';\r\nimport { CheckoutService } from 'app/customer/apiService/checkoutService/checkout.service';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-check-out',\r\n  standalone: true,\r\n  imports: [\r\n    MatStepperModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    MatFormFieldModule,\r\n  ],\r\n  templateUrl: './check-out.component.html',\r\n  styleUrls: ['./check-out.component.css'],\r\n})\r\nexport class CheckoutComponent implements OnInit {\r\n  @Output() backToCart = new EventEmitter<void>();\r\n  @Output() paymentInitiated = new EventEmitter<any>();\r\n\r\n  isPaymentInitiated: boolean = false;\r\n  checkoutData: any;\r\n  checkOutFormGroup: FormGroup;\r\n  dataSource: any[] = [];\r\n  originalTotal: number = 0;\r\n  cartTotal: number = 0;\r\n  couponDiscount: number = 0;\r\n  loyaltyDiscount: number = 0;\r\n  taxAmount: number = 0;\r\n  grandTotal: number = 0;\r\n  userLoyaltyPoints: number = 0;\r\n  username: string = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private cartService: CartService,\r\n    private checkoutService: CheckoutService,\r\n    private authService: AuthService,\r\n    private toastService: ToastService,\r\n    private router: Router,\r\n  ) {\r\n    this.checkOutFormGroup = this.fb.group({\r\n      couponCode: [''],\r\n      loyaltyPoints: [0, [Validators.min(0)]],\r\n    });\r\n    this.username = this.authService.getUserName();\r\n  }\r\n\r\n  // check-out.component.ts\r\n  async ngOnInit(): Promise<void> {\r\n    if (!this.authService.isLoggedIn()) {\r\n      console.warn('User not logged in. Redirecting to login...');\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n\r\n    this.dataSource = this.cartService.getCartItemsWithDiscounts();\r\n    const totals = this.cartService.calculateCartTotals();\r\n    this.originalTotal = totals.originalTotal;\r\n    this.cartTotal = totals.totalAmount;\r\n    this.grandTotal = this.cartTotal;\r\n\r\n    // Fetch loyalty points, default to 0 for new users\r\n    try {\r\n      const points = await this.checkoutService.fetchLoyaltyPoints(\r\n        this.username,\r\n      );\r\n      this.userLoyaltyPoints = points !== null ? points : 0; // Null check for explicit absence\r\n    } catch (error: any) {\r\n      if (error.status === 404) {\r\n        console.log('New user detected; no loyalty points yet.');\r\n        this.userLoyaltyPoints = 0; // New user case\r\n      } else {\r\n        console.error('Unexpected error fetching loyalty points:', error);\r\n        this.toastService.showError('Error loading checkout data');\r\n        this.userLoyaltyPoints = 0; // Fallback\r\n      }\r\n    }\r\n\r\n    this.updateTotals();\r\n    this.checkPaymentStatus();\r\n  }\r\n  private checkPaymentStatus(): void {\r\n    const storedCheckout = sessionStorage.getItem('checkoutData');\r\n    if (storedCheckout) {\r\n      this.checkoutData = JSON.parse(storedCheckout);\r\n      this.isPaymentInitiated = true;\r\n    }\r\n  }\r\n  async applyCoupon(): Promise<void> {\r\n    const couponCode = this.checkOutFormGroup.get('couponCode')?.value;\r\n    this.couponDiscount = await this.checkoutService.applyCoupon(\r\n      couponCode,\r\n      this.cartTotal,\r\n    );\r\n    this.updateTotals();\r\n  }\r\n\r\n  applyLoyaltyPoints(): void {\r\n    const points = this.checkOutFormGroup.get('loyaltyPoints')?.value || 0;\r\n    this.loyaltyDiscount = this.checkoutService.validateLoyaltyPoints(\r\n      points,\r\n      this.userLoyaltyPoints,\r\n    );\r\n    this.updateTotals();\r\n  }\r\n\r\n  updateTotals(): void {\r\n    const { taxAmount, grandTotal } = this.checkoutService.calculateTotals(\r\n      this.originalTotal,\r\n      this.cartTotal,\r\n      this.couponDiscount,\r\n      this.loyaltyDiscount,\r\n    );\r\n    this.taxAmount = taxAmount;\r\n    this.grandTotal = grandTotal;\r\n  }\r\n\r\n  async initiatePurchase(): Promise<void> {\r\n    const couponCode = this.checkOutFormGroup.get('couponCode')?.value;\r\n    const loyaltyPoints =\r\n      this.checkOutFormGroup.get('loyaltyPoints')?.value || 0;\r\n    const response = await this.checkoutService.initiatePurchase(\r\n      this.username,\r\n      couponCode,\r\n      loyaltyPoints,\r\n    );\r\n    // Optionally update UI with response data before redirect\r\n    this.couponDiscount = response.data.couponDiscount;\r\n    this.taxAmount = response.data.taxAmount;\r\n    this.grandTotal = response.data.finalAmount;\r\n\r\n    if (response.status === 'success') {\r\n      this.isPaymentInitiated = true;\r\n      this.paymentInitiated.emit(response.data);\r\n      // this.checkoutData = response.data;\r\n    }\r\n  }\r\n  catch(error: any) {\r\n    console.error('Purchase initiation failed:', error);\r\n    this.toastService.showError('Failed to initiate purchase');\r\n    this.isPaymentInitiated = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".checkout-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 20px;\r\n}\r\n\r\n.checkout-container {\r\n  display: flex;\r\n  gap: 20px;\r\n}\r\n\r\n.cart-items-readonly,\r\n.checkout-details {\r\n  flex: 1;\r\n}\r\n\r\n.cart-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n}\r\n\r\n.item-image {\r\n  width: 60px;\r\n  height: 60px;\r\n}\r\n\r\n.item-price {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n}\r\n\r\n.strikethrough {\r\n  text-decoration: line-through;\r\n  color: #888;\r\n}\r\n\r\n.discounted-price {\r\n  color: #e91e63;\r\n  font-weight: bold;\r\n}\r\n\r\n.summary-row {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 5px 0;\r\n}\r\n\r\n.grand-total {\r\n  font-weight: bold;\r\n  border-top: 1px solid #ddd;\r\n  padding-top: 10px;\r\n}\r\n\r\n.action-buttons {\r\n  margin-top: 20px;\r\n  display: flex;\r\n  gap: 10px;\r\n}\r\n\r\n.discount-applied {\r\n  color: green;\r\n  font-style: italic;\r\n}\r\n",
                    "styleUrl": "./check-out.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "checkoutService",
                        "type": "CheckoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 48,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutService",
                        "type": "CheckoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<form [formGroup]=\"checkOutFormGroup\" class=\"checkout-form\">\r\n  <div class=\"checkout-container\">\r\n    <!-- Cart Items (Read-Only) -->\r\n    <div class=\"cart-items-readonly\">\r\n      <h3>Your Items</h3>\r\n      <div class=\"cart-item\" *ngFor=\"let item of dataSource\">\r\n        <div class=\"item-details\">\r\n          <!-- <img\r\n            [src]=\"item.prodImgURL || 'https://via.placeholder.com/60'\"\r\n            [alt]=\"item.productName\"\r\n            class=\"item-image\"\r\n          /> -->\r\n          <div class=\"item-info\">\r\n            <span class=\"item-name\">{{ item.productName }}</span>\r\n            <span class=\"item-subtext\">Barcode: {{ item.barcode }}</span>\r\n          </div>\r\n        </div>\r\n        <div class=\"item-price\">\r\n          <span\r\n            class=\"price-text\"\r\n            [ngClass]=\"{ strikethrough: item.hasDiscount }\"\r\n          >\r\n            {{ item.price | currency: \"USD\" }}\r\n          </span>\r\n          <span class=\"discounted-price\" *ngIf=\"item.hasDiscount\">\r\n            {{ item.discountedPrice | currency: \"USD\" }}\r\n          </span>\r\n        </div>\r\n        <div class=\"item-quantity\">\r\n          <span>{{ item.cartQuantity }}</span>\r\n        </div>\r\n        <div class=\"item-total\">\r\n          {{ item.discountedPrice * item.cartQuantity | currency: \"USD\" }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Checkout Details -->\r\n    <div class=\"checkout-details\">\r\n      <!-- Payment Options -->\r\n      <div class=\"payment-section\">\r\n        <h3>Payment Info</h3>\r\n        <p>We accept PayPal:</p>\r\n        <div class=\"payment-methods\">\r\n          <img\r\n            src=\"https://via.placeholder.com/24x24?text=PayPal\"\r\n            alt=\"PayPal\"\r\n            class=\"payment-icon\"\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Coupon Section -->\r\n      <div class=\"coupon-section\">\r\n        <h3>Add Promo Code</h3>\r\n        <div class=\"coupon-input\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <input\r\n              matInput\r\n              formControlName=\"couponCode\"\r\n              placeholder=\"Enter promo code\"\r\n            />\r\n          </mat-form-field>\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            [disabled]=\"!checkOutFormGroup.get('couponCode')?.value\"\r\n            (click)=\"applyCoupon()\"\r\n          >\r\n            Apply\r\n          </button>\r\n        </div>\r\n        <p *ngIf=\"couponDiscount > 0\" class=\"discount-applied\">\r\n          Coupon applied! Discount: {{ couponDiscount | currency: \"USD\" }}\r\n        </p>\r\n      </div>\r\n\r\n      <!-- Loyalty Points Section -->\r\n      <div class=\"loyalty-section\">\r\n        <h3>Use Loyalty Points</h3>\r\n        <p>Available Points: {{ userLoyaltyPoints }}</p>\r\n        <div class=\"loyalty-input\">\r\n          <mat-form-field appearance=\"outline\">\r\n            <input\r\n              matInput\r\n              type=\"number\"\r\n              formControlName=\"loyaltyPoints\"\r\n              placeholder=\"Enter points to use\"\r\n            />\r\n          </mat-form-field>\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            [disabled]=\"\r\n              !checkOutFormGroup.get('loyaltyPoints')?.value ||\r\n              checkOutFormGroup.get('loyaltyPoints')?.value > userLoyaltyPoints\r\n            \"\r\n            (click)=\"applyLoyaltyPoints()\"\r\n          >\r\n            Apply\r\n          </button>\r\n        </div>\r\n        <p *ngIf=\"loyaltyDiscount > 0\" class=\"discount-applied\">\r\n          Loyalty points applied! Discount:\r\n          {{ loyaltyDiscount | currency: \"USD\" }}\r\n        </p>\r\n      </div>\r\n\r\n      <!-- Summary -->\r\n      <div class=\"summary-section\">\r\n        <h3>Order Summary</h3>\r\n        <div class=\"summary-row\">\r\n          <span class=\"summary-label\">Original Total</span>\r\n          <span class=\"summary-value strikethrough\">{{\r\n            originalTotal | currency: \"USD\"\r\n          }}</span>\r\n        </div>\r\n        <div class=\"summary-row\">\r\n          <span class=\"summary-label\">Subtotal (after cart discounts)</span>\r\n          <span\r\n            class=\"summary-value\"\r\n            [ngClass]=\"{\r\n              strikethrough: couponDiscount > 0 || loyaltyDiscount > 0,\r\n            }\"\r\n          >\r\n            {{ cartTotal | currency: \"USD\" }}\r\n          </span>\r\n        </div>\r\n        <div class=\"summary-row\" *ngIf=\"couponDiscount > 0\">\r\n          <span class=\"summary-label\">Coupon Discount</span>\r\n          <span class=\"summary-value\"\r\n            >-{{ couponDiscount | currency: \"USD\" }}</span\r\n          >\r\n        </div>\r\n        <div class=\"summary-row\" *ngIf=\"loyaltyDiscount > 0\">\r\n          <span class=\"summary-label\">Loyalty Points Discount</span>\r\n          <span class=\"summary-value\"\r\n            >-{{ loyaltyDiscount | currency: \"USD\" }}</span\r\n          >\r\n        </div>\r\n        <div class=\"summary-row\">\r\n          <span class=\"summary-label\">Tax</span>\r\n          <span class=\"summary-value\">{{ taxAmount | currency: \"USD\" }}</span>\r\n        </div>\r\n        <div class=\"summary-row grand-total\">\r\n          <span class=\"summary-label\">Grand Total</span>\r\n          <span class=\"summary-value\">{{ grandTotal | currency: \"USD\" }}</span>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Navigation Buttons -->\r\n      <div class=\"action-buttons\">\r\n        <button mat-raised-button matStepperPrevious class=\"back-btn\">\r\n          Back to Cart\r\n        </button>\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          (click)=\"initiatePurchase()\"\r\n          [disabled]=\"\r\n            grandTotal <= 0 || dataSource.length === 0 || isPaymentInitiated\r\n          \"\r\n        >\r\n          Confirm Order\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</form>\r\n"
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-5aab724e0f23f6ddf9f9fe14f16317d7d718bb5f1b92f0f9752febb967372799dd4067820e56868dff32f2985cdd97c6f6311b67ebd95f0aaa45ec17a9fa2852",
            "file": "src/app/Common/dialog/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<ConfirmComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cancel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject } from '@angular/core';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MatDialogModule,\r\n} from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm',\r\n  imports: [MatDialogModule],\r\n  templateUrl: './confirm.component.html',\r\n  styleUrls: ['./confirm.component.css'],\r\n})\r\nexport class ConfirmComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {}\r\n\r\n  // Close the dialog with true (confirmed)\r\n  confirm(): void {\r\n    this.dialogRef.close(true);\r\n  }\r\n\r\n  // Close the dialog with false (cancelled)\r\n  cancel(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-dialog-content p {\r\n  margin: 0;\r\n}\r\n\r\nmat-dialog-actions {\r\n  margin-top: 16px;\r\n}\r\n",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<ConfirmComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container confirmDialog\">\r\n  <h2 mat-dialog-title>{{ data.title }}</h2>\r\n  <mat-dialog-content>\r\n    <p>{{ data.message }}</p>\r\n  </mat-dialog-content>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-button class=\"button-cancel\" (click)=\"cancel()\">Cancel</button>\r\n    <button mat-raised-button class=\"button-primary\" (click)=\"confirm()\">\r\n      Confirm\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-58eb298db0d0b96b2d8aa38885e6e22776b3484f2b9e04dd78abf03d64b9bbd7f57d22a7cf7e0e1ffbbc20c3aa421e26d2e9a84000ebc67afd2e5ddf821ab0e9",
            "file": "src/app/staff/Components/dashboard/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  imports: [],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.css',\r\n})\r\nexport class DashboardComponent {}\r\n",
            "styleUrl": "./dashboard.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div>\r\n  <h2>First Tab Content</h2>\r\n  <p>This is the content for the First Tab.</p>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-c8b46b4fafc99dfb1824e50510a90bbf556459885d24a082782bc78ad9e16bafb6d83f93bcbf982eccecf69082f0607dde159ea59e4dffe87b984477de8d25e4",
            "file": "src/app/customer/Components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  imports: [],\r\n  templateUrl: './footer.component.html',\r\n  styleUrl: './footer.component.css'\r\n})\r\nexport class FooterComponent {\r\n\r\n}\r\n",
            "styleUrl": "./footer.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>footer works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-618b88e9bca44181ebbd39f2bd618317d09f23431a334589eb88ff62fa875e6a1c539060e2218f6fcda7833fca00d89fc7b3a06d9a3e06481c8beed3343b1086-1",
            "file": "src/app/customer/Components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "logoPath",
                    "defaultValue": "'assets/logo.png'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "tabNav",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabNav'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "methodsClass": [
                {
                    "name": "debugClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLoginModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateIndicator",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatButton"
                },
                {
                    "name": "FontAwesomeModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  inject,\r\n  OnInit,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { LoginModalComponent } from '../login-modal/login-modal.component';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { Route, Router, RouterModule } from '@angular/router';\r\nimport { ConfirmComponent } from 'app/Common/dialog/confirm/confirm.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  imports: [\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButton,\r\n    FontAwesomeModule,\r\n    MatIconModule,\r\n    RouterModule,\r\n    MatMenuModule,\r\n    MatDividerModule,\r\n  ],\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit, AfterViewInit {\r\n  user: any = null;\r\n  logoPath: string = 'assets/logo.png';\r\n  @ViewChild('tabNav') tabNav!: ElementRef; // Reference to the nav element\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n  ngOnInit(): void {\r\n    // Subscribe to user data changes\r\n    this.authService.user$.subscribe((userData) => {\r\n      this.user = userData;\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.updateIndicator();\r\n    // Listen to route changes or click events to update indicator\r\n    const links = this.tabNav.nativeElement.querySelectorAll('.tab-link');\r\n    links.forEach((link: HTMLElement) => {\r\n      link.addEventListener('click', () => this.updateIndicator());\r\n    });\r\n  }\r\n\r\n  updateIndicator(): void {\r\n    const activeLink =\r\n      this.tabNav.nativeElement.querySelector('.tab-link.active');\r\n    const indicator = this.tabNav.nativeElement.querySelector('.tab-indicator');\r\n    if (activeLink && indicator) {\r\n      const linkRect = activeLink.getBoundingClientRect();\r\n      const navRect = this.tabNav.nativeElement.getBoundingClientRect();\r\n      indicator.style.width = `${linkRect.width}px`;\r\n      indicator.style.left = `${linkRect.left - navRect.left}px`;\r\n    }\r\n  }\r\n\r\n  openLoginModel() {\r\n    // Open the login model\r\n    this.dialog.open(LoginModalComponent, {\r\n      width: '50%',\r\n      height: 'auto', // or a specific height\r\n      maxHeight: '80vh',\r\n      exitAnimationDuration: '1000ms',\r\n      enterAnimationDuration: '1000ms',\r\n    });\r\n  }\r\n  logout(): void {\r\n    const dialogRef = this.dialog.open(ConfirmComponent, {\r\n      width: '350px',\r\n      data: {\r\n        title: 'Logout',\r\n        message: 'Are you sure you want to log out?',\r\n      },\r\n    });\r\n    dialogRef.afterClosed().subscribe((result: boolean) => {\r\n      if (result) {\r\n        // User confirmed, proceed with logout\r\n        this.authService.logout();\r\n        this.router.navigate(['/home']);\r\n      }\r\n    });\r\n  }\r\n  debugClick(event: Event) {\r\n    console.log('Cart link clicked!');\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "/* Glassmorphism Header */\r\n.header-glass {\r\n  background: rgba(255, 255, 255, 0.1); /* Semi-transparent white */\r\n  backdrop-filter: blur(10px); /* Frosted glass blur effect */\r\n  -webkit-backdrop-filter: blur(10px); /* For Safari support */\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n  /* box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1); */\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 1000;\r\n  height: fit-content;\r\n  padding: 0;\r\n}\r\n\r\n/* Header Image */\r\nheader img {\r\n  width: 20%;\r\n  margin-left: 2%;\r\n}\r\n\r\n/* Logo Container */\r\n.logo-container {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n/* Navigation Styles */\r\n.nav-container {\r\n  position: relative;\r\n  width: 100%;\r\n}\r\n\r\n.tab-nav {\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n}\r\n\r\n.tab-link {\r\n  text-decoration: none;\r\n  color: #333;\r\n  font-weight: 500;\r\n  padding: 10px 20px; /* Adjusted padding */\r\n  position: relative;\r\n  z-index: 2;\r\n  transition: color 0.3s ease;\r\n  text-align: center;\r\n  border-radius: 8px;\r\n}\r\n\r\n/* Hover Effect */\r\n.tab-link:hover {\r\n  color: #007bff;\r\n}\r\n\r\n/* Active Tab */\r\n.tab-link.active {\r\n  color: #007bff;\r\n  font-weight: 600;\r\n}\r\n\r\n/* Tab Indicator */\r\n.tab-indicator {\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  height: 4px; /* Thickness of the indicator */\r\n  background: #007bff !important; /* Indicator color */\r\n  border-radius: 4px 4px 0 0;\r\n  transition: all 0.3s ease; /* Smooth transition for width and position */\r\n  z-index: 1;\r\n}\r\n/* Avatar Container */\r\n.avatarContainer {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: end;\r\n}\r\n\r\n.avatar {\r\n  width: 50%;\r\n  height: 10%;\r\n}\r\n\r\n.user-name {\r\n  font-weight: 500;\r\n  color: #333;\r\n}\r\n\r\n/* Make the avatar container look clickable */\r\nbutton[mat-button] {\r\n  padding: 0;\r\n  line-height: normal;\r\n  background: none;\r\n  border: none;\r\n  color: #333;\r\n  font-weight: 500;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\nbutton[mat-button]:hover {\r\n  background: rgba(0, 0, 0, 0.05);\r\n  border-radius: 4px;\r\n}\r\n\r\n/* Style the dropdown menu */\r\n:host ::ng-deep .mat-menu-panel {\r\n  margin: 10px !important;\r\n  left: 50% !important;\r\n  transform: translateX(-50%) !important;\r\n}\r\n\r\n:host ::ng-deep .mat-menu-item {\r\n  font-size: 14px;\r\n  color: #333;\r\n  padding: 8px 16px;\r\n}\r\n\r\n:host ::ng-deep .mat-menu-item:hover {\r\n  background: #f5f5f5;\r\n}\r\n\r\n:host ::ng-deep .mat-divider {\r\n  width: 100% !important;\r\n  margin: 8px 0 !important;\r\n  border-top: 1px solid rgba(0, 0, 0, 0.12) !important;\r\n}\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<header class=\"header-glass\">\r\n  <div class=\"container-fluid\">\r\n    <div class=\"row d-flex justify-content-between align-items-center\">\r\n      <div class=\"col-9 logo-container me-2\">\r\n        <a href=\"/\" routerLink=\"/\">\r\n          <img src=\"assets/logo.png\" alt=\"logo\" class=\"img-fluid logo\" />\r\n        </a>\r\n        <div class=\"nav-container\">\r\n          <nav class=\"tab-nav\">\r\n            <div class=\"d-md-flex align-items-center\">\r\n              <a\r\n                routerLink=\"/products\"\r\n                routerLinkActive=\"active\"\r\n                class=\"tab-link\"\r\n              >\r\n                <span class=\"tab-content\">Products</span>\r\n              </a>\r\n              <a routerLink=\"/offer\" routerLinkActive=\"active\" class=\"tab-link\">\r\n                <span class=\"tab-content\">Offers</span>\r\n              </a>\r\n              <a routerLink=\"/about\" routerLinkActive=\"active\" class=\"tab-link\">\r\n                <span class=\"tab-content\">About</span>\r\n              </a>\r\n              <a routerLink=\"/cart\" routerLinkActive=\"active\" class=\"tab-link\">\r\n                <span class=\"tab-content d-flex align-items-center\">\r\n                  <mat-icon>shopping_cart</mat-icon>Cart\r\n                </span>\r\n              </a>\r\n            </div>\r\n            <span class=\"tab-indicator\"></span>\r\n            <!-- Added indicator -->\r\n          </nav>\r\n        </div>\r\n      </div>\r\n      <!-- Rest of your header remains unchanged -->\r\n      <div class=\"col-2\">\r\n        <div class=\"avatarContainer\">\r\n          <ng-container *ngIf=\"user; else loginButton\">\r\n            <div>\r\n              <button\r\n                mat-button\r\n                [matMenuTriggerFor]=\"userMenu\"\r\n                class=\"text-decoration-none mat-menu-panel\"\r\n                [matMenuTriggerData]=\"{ align: 'center' }\"\r\n              >\r\n                <img\r\n                  [src]=\"user.avatar\"\r\n                  alt=\"User Avatar\"\r\n                  class=\"avatar img-fluid rounded-circle me-2\"\r\n                />\r\n                <span class=\"user-name\">{{ user.username }}</span>\r\n              </button>\r\n              <mat-menu #userMenu=\"matMenu\">\r\n                <a mat-menu-item routerLink=\"/profile\">Profile</a>\r\n                <a mat-menu-item routerLink=\"/loyalty-points\">Loyalty Points</a>\r\n                <a mat-menu-item routerLink=\"/coupon\">Coupon</a>\r\n                <a mat-menu-item routerLink=\"/history\">History</a>\r\n                <mat-divider></mat-divider>\r\n                <button mat-menu-item (click)=\"logout()\">Logout</button>\r\n              </mat-menu>\r\n            </div>\r\n          </ng-container>\r\n          <ng-template #loginButton>\r\n            <button mat-raised-button (click)=\"openLoginModel()\">Login</button>\r\n          </ng-template>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</header>\r\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-1c4e463ab22c8030156d5b62477a1aeb612415cb2f02a32589692a1ce6ac4c109c519db495f80e49a26fb1105404d60dc3bd89b3770f75ef3f0e24da71eba882",
            "file": "src/app/customer/Components/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "BannerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { BannerComponent } from '../bannerComponent/banner/banner.component';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  imports: [BannerComponent],\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css'],\r\n})\r\nexport class HomeComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<app-banner></app-banner>\r\n"
        },
        {
            "name": "LoginModalComponent",
            "id": "component-LoginModalComponent-b34b94e2a64e503625dc3f0ece6d7f660f8eb56288cae9077ff294b31490e6efc66bbc2aeb2a6f24b512e78dc4214fa63f1821997b48fd2535b287c04775bd49",
            "file": "src/app/customer/Components/login-modal/login-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [
                "./login-modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "title",
                    "defaultValue": "'Login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                }
            ],
            "methodsClass": [
                {
                    "name": "closeModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loginSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openRegisterModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport {\r\n  MatDialog,\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n} from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { Login } from 'app/customer/Model/login';\r\nimport { Router } from '@angular/router';\r\nimport { RegisterModalComponent } from '../register-modal/register-modal.component';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\n\r\n// Correct path and interface name\r\n\r\n@Component({\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n  ],\r\n  templateUrl: './login-modal.component.html',\r\n  styleUrls: ['./login-modal.component.css'],\r\n})\r\nexport class LoginModalComponent implements OnInit {\r\n  hide = true;\r\n  loginForm: any;\r\n  title = 'Login';\r\n  constructor(\r\n    private ref: MatDialogRef<LoginModalComponent>,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private dialog: MatDialog,\r\n    private toastService: ToastService\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  // Login\r\n  loginSubmit() {\r\n    if (this.loginForm.valid) {\r\n      const loginData: Login = this.loginForm.value;\r\n      // Call the service method to handle login\r\n      this.authService.login(loginData.username, loginData.password).subscribe({\r\n        next: (response: any) => {\r\n          // console.log('Login successful:', response);\r\n          this.toastService.showSuccess('Login successful');\r\n          this.ref.close();\r\n          this.router.navigate(['home']);\r\n        },\r\n        error: (error: any) => {\r\n          let errorMessage = 'An unknown error occurred.';\r\n          if (error.error instanceof ErrorEvent) {\r\n            errorMessage = `Client-side error: ${error.error.message}`;\r\n          } else {\r\n            // Backend error\r\n            errorMessage = error.error?.message || error.statusText;\r\n            // Optionally modify the error message\r\n            if (errorMessage === 'Invalid username or password.') {\r\n              errorMessage =\r\n                'The username or password you entered is incorrect. Please try again.';\r\n            }\r\n          }\r\n          this.toastService.showError(errorMessage); // Show error toast\r\n        },\r\n      });\r\n    }\r\n  }\r\n  closeModel() {\r\n    this.ref.close();\r\n  }\r\n\r\n  openRegisterModal() {\r\n    // Close the login dialog\r\n    this.ref.close();\r\n    // Open the Register dialog\r\n    this.dialog.open(RegisterModalComponent, {\r\n      width: '50%',\r\n      height: 'auto',\r\n      exitAnimationDuration: '1000ms',\r\n      enterAnimationDuration: '1000ms',\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mdc-card {\r\n  margin: 2px;\r\n}\r\n.mat-mdc-form-field {\r\n  width: 100%;\r\n\r\n  height: 100%;\r\n}\r\n.mdc-button {\r\n  margin: 2px;\r\n}\r\n.loginForm {\r\n  height: 100%;\r\n}\r\n.mat-mdc-dialog-content {\r\n  max-height: 80vh; /* Adjust as needed */\r\n  overflow: auto;\r\n}\r\n.forgotpw,\r\n.register {\r\n  text-decoration: underline;\r\n}\r\n",
                    "styleUrl": "./login-modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<LoginModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<LoginModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\r\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"loginSubmit()\" class=\"loginForm\">\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <h2>{{ title }}</h2>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <mat-form-field>\r\n          <mat-label>Username</mat-label>\r\n          <input\r\n            matInput\r\n            formControlName=\"username\"\r\n            required\r\n            placeholder=\"Enter username\"\r\n          />\r\n        </mat-form-field>\r\n\r\n        <mat-form-field>\r\n          <mat-label>Password</mat-label>\r\n          <input\r\n            matInput\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n            formControlName=\"password\"\r\n            required\r\n            placeholder=\"Enter your password\"\r\n          />\r\n          <button\r\n            type=\"button\"\r\n            mat-icon-button\r\n            matSuffix\r\n            (click)=\"hide = !hide\"\r\n            [attr.aria-label]=\"'Hide password'\"\r\n          >\r\n            <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n          </button>\r\n        </mat-form-field>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions class=\"d-flex align-self-center\">\r\n        <button mat-raised-button class=\"button-primary me-3\" type=\"submit\">\r\n          Login\r\n        </button>\r\n        <button mat-raised-button class=\"button-reset\" type=\"reset\">\r\n          Reset\r\n        </button>\r\n      </mat-card-actions>\r\n      <div class=\"container m-2 align-items-center\">\r\n        <div class=\"row d-flex justify-content-between\">\r\n          <div class=\"col-6 d-flex justify-content-start align-items-end\">\r\n            <a class=\"forgotpw\">Forgot Password?</a>\r\n          </div>\r\n\r\n          <div class=\"col-6 d-flex justify-content-end align-self-center\">\r\n            <a\r\n              title=\"register\"\r\n              class=\"m-1 register\"\r\n              (click)=\"openRegisterModal()\"\r\n            >\r\n              Don't have an account yet?\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "LoginPanelComponent",
            "id": "component-LoginPanelComponent-fee1d41fdd3ba87da73792492f4a0ac7c81c48f326ba55fe88249b64b38e00f8f0eae9495af7957e88314356d2c8ee79ce0574908334d82faae66f1f1a147567",
            "file": "src/app/staff/Components/LoginPanel/login-panel/login-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-panel",
            "styleUrls": [
                "./login-panel.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "defaultValue": "'WELCOME BACK'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "loginSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { Router } from '@angular/router';\r\nimport { Login } from 'app/customer/Model/login';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-login-panel',\r\n  imports: [\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    CommonModule,\r\n  ],\r\n  templateUrl: './login-panel.component.html',\r\n  styleUrls: ['./login-panel.component.css'],\r\n})\r\nexport class LoginPanelComponent implements OnInit {\r\n  hide = true;\r\n  loginForm: any;\r\n  title = 'WELCOME BACK';\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastService: ToastService,\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required]],\r\n    });\r\n  }\r\n\r\n  // Login\r\n  loginSubmit() {\r\n    if (this.loginForm.valid) {\r\n      const loginData: Login = this.loginForm.value;\r\n      // Call the service method to handle login\r\n      this.authService.login(loginData.username, loginData.password).subscribe({\r\n        next: (response: any) => {\r\n          // console.log('Login successful:', response);\r\n          this.toastService.showSuccess('Login successful');\r\n          this.router.navigate(['/staff/dashboard']);\r\n        },\r\n        error: (error: any) => {\r\n          let errorMessage = 'An unknown error occurred.';\r\n          if (error.error instanceof ErrorEvent) {\r\n            errorMessage = `Client-side error: ${error.error.message}`;\r\n          } else {\r\n            // Backend error\r\n            errorMessage = error.error?.message || error.statusText;\r\n            // Optionally modify the error message\r\n            if (errorMessage === 'Invalid username or password.') {\r\n              errorMessage =\r\n                'The username or password you entered is incorrect. Please try again.';\r\n            }\r\n          }\r\n          this.toastService.showError(errorMessage); // Show error toast\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container {\r\n  width: 100%;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n.card-title {\r\n  font-weight: bolder;\r\n  color: var(--gray-900);\r\n  margin: 20px;\r\n  text-align: center;\r\n}\r\n.row {\r\n  margin: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n.logo {\r\n  width: 200px;\r\n  position: relative;\r\n  right: 15%;\r\n  bottom: 5%;\r\n}\r\n\r\n.left_image_container,\r\n.right_container {\r\n  box-sizing: border-box;\r\n}\r\n.image_container {\r\n  width: 100%;\r\n  height: auto; /* Allow height to adjust based on content */\r\n}\r\n.image_container img {\r\n  max-width: 100%;\r\n  height: auto;\r\n  display: block;\r\n  border-radius: 8px;\r\n}\r\n\r\n.right_container {\r\n  background-color: #dfe6ed;\r\n  backdrop-filter: blur(10px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.staff_login_container {\r\n  position: relative;\r\n  left: 5%;\r\n  bottom: 7%;\r\n  background: rgba(255, 255, 255, 0.17);\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);\r\n  backdrop-filter: blur(3.1px);\r\n  -webkit-backdrop-filter: blur(3.1px);\r\n  border: 1px solid rgba(255, 255, 255, 0.29);\r\n  padding: 20px;\r\n  width: 100%;\r\n  max-width: 600px;\r\n}\r\n\r\n/* Login Card */\r\n.login-card {\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  backdrop-filter: blur(5px);\r\n  -webkit-backdrop-filter: blur(5px);\r\n  border: 1px solid rgba(255, 255, 255, 0.2);\r\n  width: 100%;\r\n}\r\n\r\n.login-title {\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n  color: #fff;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n/* Input Fields */\r\n.input-field {\r\n  width: 100%;\r\n  margin-bottom: 15px;\r\n}\r\n\r\n.input-field input {\r\n  font-size: 1rem;\r\n  color: #fff;\r\n}\r\n\r\n.input-field.mat-focused .mat-form-field-outline {\r\n  color: #fff;\r\n}\r\n\r\n/* Buttons */\r\n.button-container {\r\n  display: flex;\r\n  gap: 10px;\r\n  justify-content: space-between;\r\n}\r\n\r\n.login-button {\r\n  background-color: var(--sky);\r\n  color: var(--gray-900);\r\n  font-weight: 500;\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.login-button:hover {\r\n  background-color: #68e1fd;\r\n}\r\n\r\n.reset-button {\r\n  background-color: transparent;\r\n  color: var(--gray-900);\r\n  border: 1px solid rgba(255, 255, 255, 0.5);\r\n  font-weight: 500;\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease;\r\n}\r\n\r\n.reset-button:hover {\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n}\r\n",
                    "styleUrl": "./login-panel.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"login-container container-fluid\">\r\n  <div class=\"row no-gutters\">\r\n    <div class=\"col-md-6 left_image_container\">\r\n      <div class=\"image_container\">\r\n        <img src=\"assets/report-analysis-5-45.svg\" alt=\"report\" />\r\n      </div>\r\n    </div>\r\n    <div class=\"col-md-6 right_container\">\r\n      <img src=\"assets/logo.png\" alt=\"logo\" class=\"img-fluid logo\" />\r\n      <div class=\"staff_login_container\">\r\n        <mat-card class=\"login-card\">\r\n          <h2 class=\"card-title\">{{ title }}</h2>\r\n          <form\r\n            [formGroup]=\"loginForm\"\r\n            (ngSubmit)=\"loginSubmit()\"\r\n            class=\"loginForm\"\r\n          >\r\n            <mat-form-field class=\"input-field\" appearance=\"outline\">\r\n              <mat-label>Username</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"username\"\r\n                required\r\n                placeholder=\"Enter username\"\r\n              />\r\n            </mat-form-field>\r\n\r\n            <mat-form-field class=\"input-field\" appearance=\"outline\">\r\n              <mat-label>Password</mat-label>\r\n              <input\r\n                matInput\r\n                [type]=\"hide ? 'password' : 'text'\"\r\n                formControlName=\"password\"\r\n                required\r\n                placeholder=\"Enter your password\"\r\n              />\r\n              <button\r\n                type=\"button\"\r\n                mat-icon-button\r\n                matSuffix\r\n                (click)=\"hide = !hide\"\r\n                [attr.aria-label]=\"'Hide password'\"\r\n              >\r\n                <mat-icon>{{\r\n                  hide ? \"visibility_off\" : \"visibility\"\r\n                }}</mat-icon>\r\n              </button>\r\n            </mat-form-field>\r\n\r\n            <div class=\"button-container\">\r\n              <button mat-raised-button class=\"login-button\" type=\"submit\">\r\n                Login\r\n              </button>\r\n              <button mat-button class=\"reset-button\" type=\"reset\">\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </mat-card>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "OtpVerificationComponent",
            "id": "component-OtpVerificationComponent-6c2a7a16bfe17e1fa4c1fcc4e45fa1ef7137e5b17b5fab3d0137863d1c4e61b64d6efc87675d68f8379ad5fde56e3d196a683983f73be8af7679524614aebd67",
            "file": "src/app/customer/Components/otp-verficiation/otp-verficiation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-otp-verficiation",
            "styleUrls": [
                "./otp-verficiation.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./otp-verficiation.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "MAT_DIALOG_DATA"
                        }
                    ],
                    "modifierKind": [
                        170,
                        125
                    ]
                },
                {
                    "name": "otpForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onVerifyOtp",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialog,\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n} from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-otp-verficiation',\r\n  imports: [\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n  ],\r\n  templateUrl: './otp-verficiation.component.html',\r\n  styleUrls: ['./otp-verficiation.component.css'],\r\n})\r\nexport class OtpVerificationComponent implements OnInit {\r\n  otpForm!: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private ref: MatDialogRef<OtpVerificationComponent>,\r\n    private toastService: ToastService,\r\n    @Inject(MAT_DIALOG_DATA)\r\n    public data: {\r\n      username: string;\r\n      email: string;\r\n      password: string;\r\n    }\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n    console.log('Data received in OTP modal:', this.data);\r\n  }\r\n\r\n  private initForm(): void {\r\n    this.otpForm = this.fb.group({\r\n      otp: ['', [Validators.required, Validators.pattern('^[0-9]{4}$')]],\r\n    });\r\n  }\r\n\r\n  get otp() {\r\n    return this.otpForm.get('otp'); // ✅ Getter for easy access in template\r\n  }\r\n\r\n  onVerifyOtp(): void {\r\n    if (this.otpForm.valid) {\r\n      console.log(this.data);\r\n      const otpData = {\r\n        username: this.data.username, // Use the passed username\r\n        email: this.data.email, // Use the passed email\r\n        password: this.data.password, // Use the passed password\r\n        otp: this.otpForm.value.otp, // OTP entered by the user\r\n      };\r\n      console.log(otpData);\r\n      this.authService.verifyOtp(otpData, otpData.otp).subscribe({\r\n        next: (response) => {\r\n          if (response.status === 'success') {\r\n            this.toastService.showSuccess('OTP Verified Successfully!');\r\n            this.ref.close('verified');\r\n            // this.router.navigate(['home']);\r\n          } else {\r\n            this.toastService.showError('Invalid OTP. Please try again.');\r\n          }\r\n        },\r\n        error: (error) => {\r\n          console.error('OTP Verification Failed:', error);\r\n          this.toastService.showError('An error occurred while verifying OTP.');\r\n        },\r\n      });\r\n    } else {\r\n      this.otpForm.markAllAsTouched();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mdc-card {\r\n  margin: 2px;\r\n}\r\n.mat-mdc-form-field {\r\n  width: 100%;\r\n\r\n  height: 100%;\r\n}\r\n.mdc-button {\r\n  margin: 2px;\r\n}\r\n",
                    "styleUrl": "./otp-verficiation.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "ref",
                        "type": "MatDialogRef<OtpVerificationComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "MatDialogRef<OtpVerificationComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "data",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "otp": {
                    "name": "otp",
                    "getSignature": {
                        "name": "otp",
                        "type": "",
                        "returnType": "",
                        "line": 72
                    }
                }
            },
            "templateData": "<div class=\"otp-verification-container p-2 w-full\">\r\n  <mat-card>\r\n    <mat-card-title>OTP Verification</mat-card-title>\r\n    <mat-card-content>\r\n      <form [formGroup]=\"otpForm\" (ngSubmit)=\"onVerifyOtp()\">\r\n        <p>An OTP has been sent to your email: {{ data.email }}</p>\r\n        <mat-form-field appearance=\"fill\">\r\n          <mat-label>Enter OTP</mat-label>\r\n          <input matInput formControlName=\"otp\" placeholder=\"****\" />\r\n          <mat-error *ngIf=\"otp?.hasError('required')\"\r\n            >OTP is required</mat-error\r\n          >\r\n          <mat-error *ngIf=\"otp?.hasError('pattern')\"\r\n            >OTP must be 4 digits</mat-error\r\n          >\r\n        </mat-form-field>\r\n        <div class=\"button-container\">\r\n          <button\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            type=\"submit\"\r\n            [disabled]=\"otpForm.invalid\"\r\n          >\r\n            Verify OTP\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PaypalReturnComponent",
            "id": "component-PaypalReturnComponent-2e5a727c70b269b8b793d81cba5d473377ade5509eaf93678277b2a1653129bdcbcb2411764e2d3f05d0b30daf2e5cf6cc9ea04aea9154149192741fc6df8627",
            "file": "src/app/customer/Components/Purchase/paypal/paypal-return/paypal-return.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-paypal-return",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./paypal-return.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkoutData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "CheckoutData",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "backToCheckout",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "paymentCancelled",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "paymentExecuted",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "payerId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "paymentId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "pdfUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "purchaseId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "cancelPayment",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 200,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "executePayment",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getCookie",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadCheckoutData",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 194,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123,
                        134
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CheckoutService } from 'app/customer/apiService/checkoutService/checkout.service';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\nimport { AuthService } from '../../../../../Service/auth/auth.service';\r\nimport { isTokenExpired } from 'app/utils/jwt.utils';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\nimport { PdfService } from 'app/Service/pdf/pdf.service';\r\n\r\n@Component({\r\n  selector: 'app-paypal-return',\r\n  imports: [CommonModule],\r\n  templateUrl: './paypal-return.component.html',\r\n  styleUrl: './paypal-return.component.css',\r\n})\r\nexport class PaypalReturnComponent implements OnInit {\r\n  @Input() checkoutData!: CheckoutData;\r\n  @Output() backToCheckout = new EventEmitter<void>();\r\n  @Output() paymentExecuted = new EventEmitter<any>();\r\n  @Output() paymentCancelled = new EventEmitter<void>();\r\n\r\n  purchaseId: string | null = null;\r\n  paymentId: string | null = null;\r\n  payerId: string | null = null;\r\n  pdfUrl: string | null = null;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private checkoutService: CheckoutService,\r\n    private toastService: ToastService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private pdfService: PdfService,\r\n  ) {}\r\n  async ngOnInit(): Promise<void> {\r\n    const token = this.getCookie('authToken') || this.authService.getToken();\r\n    if (token && !isTokenExpired(token)) {\r\n      this.authService.setUserFromToken(token);\r\n      this.authService.isLoggedInSubject.next(true);\r\n    } else {\r\n      this.toastService.showError('Session expired. Please log in again.');\r\n      this.router.navigate(['/login']);\r\n      return;\r\n    }\r\n    // Extract query parameters from the PayPal redirect\r\n    this.purchaseId = this.route.snapshot.queryParamMap.get('purchaseId');\r\n    this.paymentId = this.route.snapshot.queryParamMap.get('paymentId');\r\n    this.payerId = this.route.snapshot.queryParamMap.get('PayerID');\r\n    const tokenParam = this.route.snapshot.queryParamMap.get('token');\r\n\r\n    if (!this.paymentId || !this.payerId || !this.purchaseId) {\r\n      this.toastService.showError('Missing payment details from PayPal.');\r\n      this.backToCheckout.emit();\r\n      return;\r\n    }\r\n    if (!this.checkoutData) {\r\n      await this.loadCheckoutData();\r\n    }\r\n\r\n    // await this.executePayment(purchaseId, paymentId, payerId);\r\n  }\r\n  // async executePayment (\r\n  //   purchaseId: string,\r\n  //   paymentId: string,\r\n  //   payerId: string,\r\n  // ): Promise<void> {\r\n  //   try {\r\n  //     const storedCheckoutItems = sessionStorage.getItem('checkoutData');\r\n  //     if (!storedCheckoutItems) {\r\n  //       throw new Error('Checkout items not found in session storage.');\r\n  //     }\r\n  //     const checkoutItems: any = JSON.parse(storedCheckoutItems);\r\n  //     console.log('Parsed checkout items:', checkoutItems);\r\n  //     const {\r\n  //       cartItems,\r\n  //       originalAmount,\r\n  //       totalAmount,\r\n  //       couponCode,\r\n  //       couponDiscount,\r\n  //       loyaltyPointsUsed,\r\n  //       loyaltyDiscount,\r\n  //       taxAmount,\r\n  //       finalAmount,\r\n  //       username,\r\n  //     } = checkoutItems;\r\n\r\n  //     const checkoutData = {\r\n  //       purchaseId: Number(purchaseId),\r\n  //       cartItems: cartItems.map((item: any) => ({\r\n  //         barcode: item.barcode,\r\n  //         name: item.productName,\r\n  //         price: item.price,\r\n  //         discountedPrice: item.discountedPrice,\r\n  //         quantity: item.cartQuantity,\r\n  //       })),\r\n  //       originalAmount: originalAmount,\r\n  //       totalAmount: totalAmount,\r\n  //       couponCode: couponCode,\r\n  //       couponDiscount: couponDiscount,\r\n  //       loyaltyPointsUsed: loyaltyPointsUsed,\r\n  //       loyaltyDiscount: loyaltyDiscount,\r\n  //       taxAmount: taxAmount,\r\n  //       finalAmount: finalAmount,\r\n  //       username: username,\r\n  //     };\r\n\r\n  //     const response = await this.checkoutService.executePurchasePayment(\r\n  //       checkoutData,\r\n  //       Number(purchaseId),\r\n  //       paymentId,\r\n  //       payerId,\r\n  //     );\r\n  //     console.log('Backend response:', response);\r\n  //     if (response.status === 'success') {\r\n  //       this.toastService.showSuccess('Payment completed successfully!');\r\n  //       this.router.navigate(['/cart/voucher'], {\r\n  //         state: { purchaseId: response.data.purchaseId },\r\n  //       });\r\n  //     } else {\r\n  //       this.toastService.showError('Payment execution failed.');\r\n  //       this.router.navigate(['/cart/payment']);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Error executing payment:', error);\r\n  //     this.toastService.showError('Failed to process payment.');\r\n  //     this.router.navigate(['/cart/checkout']);\r\n  //   }\r\n  // }\r\n\r\n  async executePayment(): Promise<void> {\r\n    if (!this.purchaseId || !this.paymentId || !this.payerId) {\r\n      this.toastService.showError('Missing payment parameters');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const storedCheckoutItems = sessionStorage.getItem('checkoutData');\r\n      if (!storedCheckoutItems) {\r\n        throw new Error('Checkout items not found in session storage.');\r\n      }\r\n      const checkoutItems: any = JSON.parse(storedCheckoutItems);\r\n\r\n      const checkoutData = {\r\n        purchaseId: Number(this.purchaseId),\r\n        cartItems: checkoutItems.cartItems.map((item: any) => ({\r\n          barcode: item.barcode,\r\n          name: item.name || item.productName,\r\n          price: item.price,\r\n          discountedPrice: item.discountedPrice,\r\n          quantity: item.quantity || item.cartQuantity,\r\n        })),\r\n        originalAmount: checkoutItems.originalAmount,\r\n        totalAmount: checkoutItems.totalAmount,\r\n        couponCode: checkoutItems.couponCode,\r\n        couponDiscount: checkoutItems.couponDiscount,\r\n        loyaltyPointsUsed: checkoutItems.loyaltyPointsUsed,\r\n        loyaltyDiscount: checkoutItems.loyaltyDiscount,\r\n        taxAmount: checkoutItems.taxAmount,\r\n        finalAmount: checkoutItems.finalAmount,\r\n        username: checkoutItems.username,\r\n      };\r\n\r\n      const response = await this.checkoutService.executePurchasePayment(\r\n        checkoutData,\r\n        Number(this.purchaseId),\r\n        this.paymentId,\r\n        this.payerId,\r\n      );\r\n\r\n      if (response.status === 'success') {\r\n        this.toastService.showSuccess('Payment completed successfully!');\r\n        sessionStorage.removeItem('checkoutData');\r\n\r\n        //Update checkout data with response data\r\n        this.checkoutData = { ...checkoutData, ...response.data };\r\n\r\n        this.paymentExecuted.emit(this.checkoutData); // Emit purchase data\r\n      } else {\r\n        this.toastService.showError('Payment execution failed.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error executing payment:', error);\r\n      this.toastService.showError('Failed to process payment.');\r\n    }\r\n  }\r\n\r\n  private getCookie(name: string): string | null {\r\n    const value = `; ${document.cookie}`;\r\n    const parts = value.split(`; ${name}=`);\r\n    if (parts.length === 2) return parts.pop()?.split(';').shift() || null;\r\n    return null;\r\n  }\r\n  private async loadCheckoutData(): Promise<void> {\r\n    const storedCheckout = sessionStorage.getItem('checkoutData');\r\n    if (storedCheckout) {\r\n      this.checkoutData = JSON.parse(storedCheckout);\r\n    }\r\n  }\r\n  async cancelPayment(): Promise<void> {\r\n    if (!this.purchaseId) {\r\n      this.toastService.showError('Missing purchase ID for cancellation');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await this.checkoutService.cancelPurchase(\r\n        Number(this.purchaseId),\r\n      );\r\n      if (response.status === 'success') {\r\n        sessionStorage.removeItem('checkoutData'); // Clear checkout data\r\n        this.paymentCancelled.emit(); // Notify parent component\r\n      }\r\n    } catch (error) {\r\n      console.error('Error cancelling payment:', error);\r\n      this.toastService.showError('Failed to cancel payment.');\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./paypal-return.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "checkoutService",
                        "type": "CheckoutService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "pdfService",
                        "type": "PdfService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "checkoutService",
                        "type": "CheckoutService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "pdfService",
                        "type": "PdfService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"paypal-return-container\">\r\n  <h2>Review Your Purchase</h2>\r\n\r\n  <!-- Voucher Display -->\r\n  <div class=\"voucher-section\" *ngIf=\"checkoutData\">\r\n    <h3>Purchase Details</h3>\r\n    <div class=\"cart-items\">\r\n      <div class=\"cart-item\" *ngFor=\"let item of checkoutData.cartItems\">\r\n        <div class=\"item-details\">\r\n          <span class=\"item-name\">{{ item.name }}</span>\r\n          <span class=\"item-subtext\">Barcode: {{ item.barcode }}</span>\r\n        </div>\r\n        <div class=\"item-price\">{{ item.price | currency: \"USD\" }}</div>\r\n        <div class=\"item-discount\">\r\n          {{ item.discountedPrice | currency: \"USD\" }}\r\n        </div>\r\n        <div class=\"item-quantity\">{{ item.quantity }}</div>\r\n        <div class=\"item-total\">\r\n          {{ item.discountedPrice * item.quantity | currency: \"USD\" }}\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"summary-section\">\r\n      <div class=\"summary-row\">\r\n        <span>Original Total:</span>\r\n        <span>{{ checkoutData.originalAmount | currency: \"USD\" }}</span>\r\n      </div>\r\n      <div class=\"summary-row\" *ngIf=\"checkoutData.couponDiscount\">\r\n        <span>Coupon Discount:</span>\r\n        <span>-{{ checkoutData.couponDiscount | currency: \"USD\" }}</span>\r\n      </div>\r\n      <div class=\"summary-row\" *ngIf=\"checkoutData.loyaltyDiscount\">\r\n        <span>Loyalty Discount:</span>\r\n        <span>-{{ checkoutData.loyaltyDiscount | currency: \"USD\" }}</span>\r\n      </div>\r\n      <div class=\"summary-row\">\r\n        <span>Subtotal:</span>\r\n        <span>{{ checkoutData.totalAmount | currency: \"USD\" }}</span>\r\n      </div>\r\n      <div class=\"summary-row\">\r\n        <span>Tax:</span>\r\n        <span>{{ checkoutData.taxAmount | currency: \"USD\" }}</span>\r\n      </div>\r\n      <div class=\"summary-row grand-total\">\r\n        <span>Final Amount:</span>\r\n        <span>{{ checkoutData.finalAmount | currency: \"USD\" }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Action Buttons -->\r\n  <div class=\"action-buttons\">\r\n    <button mat-raised-button color=\"warn\" (click)=\"cancelPayment()\">\r\n      Cancel Transaction\r\n    </button>\r\n    <button mat-raised-button color=\"primary\" (click)=\"executePayment()\">\r\n      Execute Payment\r\n    </button>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProductDetailComponent",
            "id": "component-ProductDetailComponent-b46e939a1b5cd1866fb125b4f98d06e8f694283549d7ea9b0cba0535b0a1e0e9168b35be056cf2983192656f9c3317f9af2e105b4d8071dc65a69030029d898b",
            "file": "src/app/customer/Components/product/product-detail/product-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./product-detail.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "barcode",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "product",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "quantity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "addItemToCart",
                    "args": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "quantity",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchProductByBarcode",
                    "args": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "barcode",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showProductDetail",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { ProductService } from '../../../apiService/productService/product.service';\r\nimport { ToastService } from '../../../../Service/toast/toast.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CartService } from 'app/customer/apiService/cartService/cart.service';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { firstValueFrom } from 'rxjs';\r\nimport { MainService } from 'app/Service/main.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-product-detail',\r\n  imports: [CommonModule, FormsModule],\r\n  templateUrl: './product-detail.component.html',\r\n  styleUrl: './product-detail.component.css',\r\n})\r\nexport class ProductDetailComponent implements OnInit {\r\n  product: any;\r\n  barcode: string | null = null;\r\n  loading: boolean = false;\r\n  errorMessage: string = '';\r\n  quantity: number = 1;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private productService: ProductService,\r\n    private toastService: ToastService,\r\n    private cartService: CartService,\r\n    private http: HttpClient,\r\n    private mainService: MainService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.showProductDetail();\r\n  }\r\n\r\n  showProductDetail(): void {\r\n    // Get product details from history.state (only on navigation via router.navigate)\r\n    if (history.state && history.state.productDetails) {\r\n      this.product = history.state.productDetails.data; // Use passed product details if available\r\n    } else {\r\n      // If product details not passed, fetch it from API based on barcode\r\n      this.route.params.subscribe((params) => {\r\n        if (params['barcode']) {\r\n          this.barcode = params['barcode'];\r\n          if (this.barcode) {\r\n            this.fetchProductByBarcode(this.barcode); // Make API call if barcode is present\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  fetchProductByBarcode(barcode: string): void {\r\n    this.loading = true;\r\n    this.productService.getProductByBarcode(barcode).subscribe({\r\n      next: (response: any) => {\r\n        if (response.status === 'success' && response.data) {\r\n          // console.log('Product details:', response.data);\r\n          this.product = response.data; // Update product details with API response\r\n          this.loading = false;\r\n        } else {\r\n          console.log('Error fetching product:', response.message);\r\n          this.loading = false;\r\n          this.toastService.showError('Product not found!');\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Api error:', error);\r\n        this.goBack(); // Handle error and navigate back if API call fails\r\n      },\r\n    });\r\n  }\r\n\r\n  goBack(): void {\r\n    this.router.navigate(['/scan']);\r\n  }\r\n\r\n  // add to cart\r\n  async addItemToCart(product: any, quantity: number): Promise<void> {\r\n    try {\r\n      // Check if the user is logged in\r\n      if (!this.mainService.isUserLoggedIn()) {\r\n        this.toastService.showWarning(\r\n          'Please log in to add items to your cart.'\r\n        );\r\n        return;\r\n      }\r\n\r\n      // Add product to cart using CartService\r\n      await this.cartService.addToCart(product, quantity);\r\n\r\n      // Redirect to cart page\r\n      this.router.navigate(['/cart']);\r\n    } catch (error) {\r\n      console.error('Error adding to cart:', error);\r\n      this.toastService.showError('An error occurred while adding to cart.');\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./product-detail.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "mainService",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "productService",
                        "type": "ProductService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cartService",
                        "type": "CartService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "mainService",
                        "type": "MainService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Show loading message -->\r\n<ng-template #loadingTemplate>\r\n  <p>Loading product details...</p>\r\n</ng-template>\r\n\r\n<div *ngIf=\"errorMessage\" class=\"error\">\r\n  <p>{{ errorMessage }}</p>\r\n  <button (click)=\"goBack()\">Go Back</button>\r\n</div>\r\n\r\n<div *ngIf=\"product && !loading\" class=\"product-detail\">\r\n  <h2>{{ product.productName }}</h2>\r\n  <p><strong>Description:</strong> {{ product.productDesc }}</p>\r\n  <p><strong>Brand:</strong> {{ product.brand }}</p>\r\n  <p><strong>Price:</strong> {{ product.price }}</p>\r\n  <p><strong>Stock:</strong> {{ product.stockUnit }}</p>\r\n  <p><strong>Manufacture Date:</strong> {{ product.manuDate }}</p>\r\n  <p><strong>Expiry Date:</strong> {{ product.expDate }}</p>\r\n  <p><strong>Rating:</strong> ⭐{{ product.rating }}</p>\r\n\r\n  <div *ngIf=\"product.prodImgURL\">\r\n    <img [src]=\"product.prodImgURL\" alt=\"Product Image\" width=\"200\" />\r\n  </div>\r\n\r\n  <!-- Quantity input -->\r\n  <div>\r\n    <label for=\"quantity\">Quantity:</label>\r\n    <input\r\n      type=\"number\"\r\n      id=\"quantity\"\r\n      [(ngModel)]=\"quantity\"\r\n      min=\"1\"\r\n      [max]=\"product.stockUnit\"\r\n    />\r\n  </div>\r\n\r\n  <!-- Add to Cart button with quantity -->\r\n  <button (click)=\"addItemToCart(product, quantity)\">Add to Cart</button>\r\n  <button (click)=\"goBack()\">Back</button>\r\n</div>\r\n"
        },
        {
            "name": "QuantitySelectorComponent",
            "id": "component-QuantitySelectorComponent-62b0ea48bc7cde92e0f4c1b917c968fad47ce93a7aba192fd8bb9a657f254e689609e507de86717caa2c5ed923c2e07fa023af7155e428f4b8cf72b7664f6701",
            "file": "src/app/Common/quantity-selector/quantity-selector.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-quantity-selector",
            "styleUrls": [
                "./quantity-selector.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./quantity-selector.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "count",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "countChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "decrement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "increment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-quantity-selector',\r\n  imports: [],\r\n  templateUrl: './quantity-selector.component.html',\r\n  styleUrls: ['./quantity-selector.component.css'],\r\n})\r\nexport class QuantitySelectorComponent {\r\n  // Input property to set the initial quantity\r\n  @Input() count: number = 0;\r\n\r\n  // Output event to notify parent components of changes\r\n  @Output() countChange = new EventEmitter<number>();\r\n  increment() {\r\n    this.count++;\r\n    this.countChange.emit(this.count);\r\n  }\r\n  decrement() {\r\n    if (this.count > 0) {\r\n      this.count--;\r\n      this.countChange.emit(this.count);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".quantity-selector {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  gap: 10px;\r\n  background: linear-gradient(\r\n    135deg,\r\n    var(--gray-100),\r\n    var(--gray-200)\r\n  ); /* Subtle gradient */\r\n  width: clamp(\r\n    120px,\r\n    20vw,\r\n    150px\r\n  ); /* Min 120px, max 150px, scales with viewport */\r\n  padding: clamp(3px, 0.5vw, 5px) clamp(5px, 1vw, 10px);\r\n  border-radius: 50px;\r\n  box-shadow:\r\n    0 4px 15px rgba(0, 0, 0, 0.1),\r\n    inset 0 1px 3px rgba(255, 255, 255, 0.3); /* Outer shadow + inner highlight */\r\n  border: 1px solid var(--gray-400);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.quantity-selector:hover {\r\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\r\n  background: linear-gradient(\r\n    135deg,\r\n    var(--gray-200),\r\n    var(--gray-100)\r\n  ); /* Reverse gradient */\r\n}\r\n\r\nbutton {\r\n  width: clamp(25px, 4vw, 30px);\r\n  height: clamp(25px, 4vw, 30px);\r\n  border: none;\r\n  background: linear-gradient(to bottom, var(--gray-400), var(--gray-600));\r\n  color: var(--white);\r\n  font-size: clamp(14px, 2vw, 16px);\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\r\n  transition:\r\n    transform 0.2s ease,\r\n    background 0.3s ease;\r\n}\r\n\r\nbutton:hover:not(:disabled) {\r\n  transform: scale(1.1); /* Slight grow effect */\r\n  background: linear-gradient(\r\n    to bottom,\r\n    var(--gray-600),\r\n    var(--gray-400)\r\n  ); /* Reverse gradient */\r\n}\r\n\r\nbutton:active:not(:disabled) {\r\n  transform: scale(0.95); /* Pressed effect */\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3); /* Reduced shadow */\r\n}\r\n\r\nbutton:disabled {\r\n  background: var(--gray-200);\r\n  color: var(--gray-600); /* Dimmed text */\r\n  cursor: not-allowed;\r\n  box-shadow: none;\r\n}\r\n\r\nspan {\r\n  font-size: clamp(16px, 2.5vw, 18px);\r\n  font-weight: bold;\r\n  color: var(--gray-900); /* Darker text for contrast */\r\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\r\n  padding: 0 clamp(5px, 1vw, 10px); /* Breathing room */\r\n}\r\n/* Media Queries for Fine-Tuning */\r\n@media (max-width: 768px) {\r\n  .quantity-selector {\r\n    width: clamp(100px, 25vw, 130px); /* Slightly smaller on tablets */\r\n    padding: 3px 8px;\r\n    border-radius: 40px; /* Slightly less extreme pill shape */\r\n  }\r\n\r\n  button {\r\n    width: clamp(20px, 5vw, 25px);\r\n    height: clamp(20px, 5vw, 25px);\r\n    font-size: clamp(12px, 2.5vw, 14px);\r\n  }\r\n\r\n  span {\r\n    font-size: clamp(14px, 3vw, 16px);\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .quantity-selector {\r\n    width: clamp(80px, 30vw, 120px); /* Even smaller on mobile */\r\n    padding: 2px 6px;\r\n    gap: 5px;\r\n    border-radius: 30px;\r\n  }\r\n\r\n  button {\r\n    width: 20px;\r\n    height: 20px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  span {\r\n    font-size: 14px;\r\n    padding: 0 5px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./quantity-selector.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"counter-container quantity-selector\">\r\n  <button\r\n    (click)=\"decrement()\"\r\n    class=\"countre-btn\"\r\n    title=\"Decrease quantity\"\r\n    [disabled]=\"count === 0\"\r\n  >\r\n    -\r\n  </button>\r\n  <span class=\"counter-value\">{{ count }}</span>\r\n  <button (click)=\"increment()\" class=\"countre-btn\" title=\"Increase quantity\">\r\n    +\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "RegisterModalComponent",
            "id": "component-RegisterModalComponent-67cf55b527fa0f96635a58e2eb4036fe16e8f2427a2884a2f2634a04485a48dd33456beaf904004ab93188506a24b94dd5e7476a6b0767c3a572664799097862",
            "file": "src/app/customer/Components/register-modal/register-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-modal",
            "styleUrls": [
                "./register-modal.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./register-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/user/signup'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "hide",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "hideConfirm",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "regForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "title",
                    "defaultValue": "'Register'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInitializes the registration form with validation rules.\n",
                    "description": "<p>Initializes the registration form with validation rules.</p>\n",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHandles form submission and sends data to the backend.\n",
                    "description": "<p>Handles form submission and sends data to the backend.</p>\n"
                },
                {
                    "name": "openLoginModel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openOtpFormModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 188,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordMatchValidator",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ missingControls: boolean; }",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCustom validator to check if the password and confirmPassword fields match.\n",
                    "description": "<p>Custom validator to check if the password and confirmPassword fields match.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatDatepickerModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport {\r\n  MatDialog,\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n} from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  AbstractControlOptions,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  ReactiveFormsModule,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { Login } from 'app/customer/Model/login';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { LoginModalComponent } from '../login-modal/login-modal.component';\r\nimport { OtpVerificationComponent } from '../otp-verficiation/otp-verficiation.component';\r\nimport { ToastService } from 'app/Service/toast/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-register-modal',\r\n  imports: [\r\n    MatCardModule,\r\n    ReactiveFormsModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatDatepickerModule,\r\n    MatSelectModule,\r\n    MatIconModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n  ],\r\n  templateUrl: './register-modal.component.html',\r\n  styleUrls: ['./register-modal.component.css'],\r\n})\r\nexport class RegisterModalComponent implements OnInit {\r\n  hide = true;\r\n  regForm: any;\r\n  title = 'Register';\r\n  hideConfirm = true;\r\n\r\n  apiUrl = '/user/signup';\r\n  constructor(\r\n    private ref: MatDialogRef<RegisterModalComponent>,\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private http: HttpClient,\r\n    private dialog: MatDialog,\r\n    private toastService: ToastService,\r\n  ) {}\r\n  ngOnInit(): void {\r\n    this.initForm();\r\n  }\r\n\r\n  /**\r\n   * Initializes the registration form with validation rules.\r\n   */\r\n  private initForm(): void {\r\n    this.regForm = this.fb.group(\r\n      {\r\n        username: [\r\n          '',\r\n          {\r\n            validators: [\r\n              Validators.required,\r\n              Validators.pattern('^[A-Z][A-Za-z!@#$%^&*(),.?\":{}|<>0-9]{2,}$'),\r\n              Validators.minLength(3),\r\n              Validators.maxLength(256),\r\n            ],\r\n          },\r\n        ],\r\n        email: ['', { validators: [Validators.required, Validators.email] }],\r\n        password: [\r\n          '',\r\n          {\r\n            validators: [\r\n              Validators.required,\r\n              Validators.minLength(6),\r\n              Validators.maxLength(32),\r\n              Validators.pattern(\r\n                '^(?=.*[A-Za-z])(?=.*\\\\d)(?=.*[!@#$%^&*()\\\\-_=+{}\\\\[\\\\]|:;\"\\'<>,.?/~`]).{6,}$',\r\n              ),\r\n            ],\r\n          },\r\n        ],\r\n        confirmPassword: ['', { validators: [Validators.required] }],\r\n      },\r\n      { validators: this.passwordMatchValidator } as AbstractControlOptions, // Explicitly specify type\r\n    );\r\n\r\n    this.regForm.get('password')?.valueChanges.subscribe(() => {\r\n      this.regForm.get('confirmPassword')?.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Custom validator to check if the password and confirmPassword fields match.\r\n   */\r\n  private passwordMatchValidator(form: FormGroup) {\r\n    const password = form.get('password');\r\n    const confirmPassword = form.get('confirmPassword');\r\n\r\n    if (!password || !confirmPassword) {\r\n      return { missingControls: true };\r\n    }\r\n\r\n    if (password.value !== confirmPassword.value) {\r\n      confirmPassword.setErrors({ mismatch: true });\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Handles form submission and sends data to the backend.\r\n   */\r\n  onRegister(): void {\r\n    if (this.regForm.valid) {\r\n      const formData = {\r\n        username: this.regForm.value.username,\r\n        email: this.regForm.value.email,\r\n        password: this.regForm.value.password,\r\n      };\r\n\r\n      this.http.post(this.apiUrl, formData).subscribe({\r\n        next: (response) => {\r\n          console.log('Registration Successful', response);\r\n          this.toastService.showSuccess(\r\n            'Registration successful! Please verify your email.',\r\n          );\r\n\r\n          this.ref.close();\r\n          // Open OTP form modal\r\n          this.openOtpFormModal();\r\n          this.regForm.reset();\r\n          // this.router.navigate(['home']);\r\n        },\r\n        error: (error) => {\r\n          console.error('Registration failed', error);\r\n          this.toastService.showError('Registration failed. Please try again.');\r\n        },\r\n      });\r\n    } else {\r\n      this.regForm.markAllAsTouched(); // Shows errors if fields are invalid\r\n    }\r\n  }\r\n\r\n  // Getter methods for form controls\r\n  get username() {\r\n    return this.regForm.get('username');\r\n  }\r\n\r\n  get email() {\r\n    return this.regForm.get('email');\r\n  }\r\n\r\n  get password() {\r\n    return this.regForm.get('password');\r\n  }\r\n\r\n  get confirmPassword() {\r\n    return this.regForm.get('confirmPassword');\r\n  }\r\n  openLoginModel() {\r\n    this.ref.close();\r\n    // Open the login model\r\n    this.dialog.open(LoginModalComponent, {\r\n      width: '50%',\r\n      height: 'auto', // or a specific height\r\n      maxHeight: '80vh',\r\n      exitAnimationDuration: '1000ms',\r\n      enterAnimationDuration: '1000ms',\r\n    });\r\n  }\r\n  openOtpFormModal(): void {\r\n    debugger;\r\n    const dialogRef = this.dialog.open(OtpVerificationComponent, {\r\n      width: '50%', // Set the width of the modal\r\n      height: 'auto', // or a specific height\r\n      maxHeight: '80vh',\r\n      exitAnimationDuration: '1000ms',\r\n      enterAnimationDuration: '1000ms',\r\n      data: {\r\n        username: this.regForm.value.username, // Pass the username\r\n        email: this.regForm.value.email, // Pass the email\r\n        password: this.regForm.value.password, // Pass the password\r\n      },\r\n    });\r\n\r\n    // Handle actions after the OTP form modal is closed\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      console.log('OTP form modal closed', result);\r\n      if (result === 'verified') {\r\n        this.router.navigate(['home']);\r\n      } else {\r\n        // console.log('OTP verification failed or canceled');\r\n        this.toastService.showError(\r\n          'OTP verification failed. Please try again.',\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mdc-card {\r\n  margin: 2px;\r\n}\r\n.mat-mdc-form-field {\r\n  width: 100%;\r\n\r\n  height: 100%;\r\n}\r\n.mdc-button {\r\n  margin: 2px;\r\n}\r\n.regForm {\r\n  height: 100%;\r\n}\r\n.mat-mdc-dialog-content {\r\n  max-height: 80vh; /* Adjust as needed */\r\n  overflow: auto;\r\n}\r\n",
                    "styleUrl": "./register-modal.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<RegisterModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "MatDialogRef<RegisterModalComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "toastService",
                        "type": "ToastService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 162
                    }
                },
                "email": {
                    "name": "email",
                    "getSignature": {
                        "name": "email",
                        "type": "",
                        "returnType": "",
                        "line": 166
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 170
                    }
                },
                "confirmPassword": {
                    "name": "confirmPassword",
                    "getSignature": {
                        "name": "confirmPassword",
                        "type": "",
                        "returnType": "",
                        "line": 174
                    }
                }
            },
            "templateData": "<mat-dialog-content>\r\n  <form [formGroup]=\"regForm\" class=\"regForm\" (ngSubmit)=\"onRegister()\">\r\n    <mat-card>\r\n      <mat-card-header class=\"d-flex align-items-center justify-center\">\r\n        <h2>{{ title }}</h2>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <mat-form-field>\r\n          <mat-label>Username</mat-label>\r\n          <input\r\n            matInput\r\n            formControlName=\"username\"\r\n            placeholder=\"Enter username\"\r\n            required\r\n          />\r\n          <mat-error *ngIf=\"username?.invalid && username?.touched\">\r\n            <span *ngIf=\"username?.errors?.['required']\"\r\n              >Username is required</span\r\n            >\r\n            <span *ngIf=\"username?.errors?.['pattern']\">\r\n              Username must start with an uppercase letter and be at least 3\r\n              characters long.\r\n            </span>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field>\r\n          <mat-label>Email</mat-label>\r\n          <input\r\n            matInput\r\n            formControlName=\"email\"\r\n            placeholder=\"Enter email\"\r\n            required\r\n            type=\"email\"\r\n          />\r\n          <mat-error *ngIf=\"email?.invalid && email?.touched\">\r\n            <span *ngIf=\"email?.errors?.['required']\">Email is required</span>\r\n            <span *ngIf=\"email?.errors?.['email']\">Enter a valid email</span>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field>\r\n          <mat-label>Password</mat-label>\r\n          <input\r\n            matInput\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n            formControlName=\"password\"\r\n            required\r\n            placeholder=\"Enter your password\"\r\n          />\r\n          <button\r\n            mat-icon-button\r\n            matSuffix\r\n            type=\"button\"\r\n            (click)=\"hide = !hide\"\r\n          >\r\n            <mat-icon>{{ hide ? \"visibility_off\" : \"visibility\" }}</mat-icon>\r\n          </button>\r\n          <mat-error *ngIf=\"password?.invalid && password?.touched\">\r\n            <span *ngIf=\"password?.errors?.['required']\"\r\n              >Password is required</span\r\n            >\r\n            <span *ngIf=\"password?.errors?.['pattern']\">\r\n              Password must contain at least one letter, one number, and one\r\n              special character.\r\n            </span>\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field>\r\n          <mat-label>Confirm Password</mat-label>\r\n          <input\r\n            matInput\r\n            [type]=\"hideConfirm ? 'password' : 'text'\"\r\n            formControlName=\"confirmPassword\"\r\n            required\r\n            placeholder=\"Confirm your password\"\r\n          />\r\n          <button\r\n            mat-icon-button\r\n            matSuffix\r\n            type=\"button\"\r\n            (click)=\"hideConfirm = !hideConfirm\"\r\n          >\r\n            <mat-icon>{{\r\n              hideConfirm ? \"visibility_off\" : \"visibility\"\r\n            }}</mat-icon>\r\n          </button>\r\n          <mat-error\r\n            *ngIf=\"confirmPassword?.invalid && confirmPassword?.touched\"\r\n          >\r\n            <span *ngIf=\"confirmPassword?.errors?.['required']\"\r\n              >Confirm Password is required</span\r\n            >\r\n            <span *ngIf=\"regForm.get('confirmPassword')?.hasError('mismatch')\">\r\n              Passwords do not match\r\n            </span>\r\n          </mat-error>\r\n        </mat-form-field>\r\n      </mat-card-content>\r\n\r\n      <mat-card-actions class=\"d-flex align-self-center\">\r\n        <button mat-raised-button class=\"button-primary me-3\" type=\"submit\">\r\n          Register\r\n        </button>\r\n        <button mat-raised-button class=\"button-reset\" type=\"reset\">\r\n          Reset\r\n        </button>\r\n      </mat-card-actions>\r\n      <div class=\"d-flex justify-content-end align-self-center\">\r\n        <a title=\"login\" class=\"m-1 login\" (click)=\"openLoginModel()\">\r\n          Already had an account yet?\r\n        </a>\r\n      </div>\r\n    </mat-card>\r\n  </form>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-933361225b33fa4681510e0fa90c32cce629df1b5985a9c70640236521bd6ecf80cc417363e03c9fc1ccb303862438ef54981c976a18418c90a26b959ebfb12a",
            "file": "src/app/staff/Components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeChildIndex",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "tabs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "userRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 257,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nLog out the user and navigate to the login page.\n",
                    "description": "<p>Log out the user and navigate to the login page.</p>\n"
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setActive",
                    "args": [
                        {
                            "name": "parentIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "childIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet the active tab (parent or child) and navigate to its route.\n",
                    "description": "<p>Set the active tab (parent or child) and navigate to its route.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 1353,
                                "end": 1364,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "parentIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 1347,
                                "end": 1352,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The index of the parent tab.</li>\n</ul>\n"
                        },
                        {
                            "name": {
                                "pos": 1409,
                                "end": 1419,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "childIndex"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "pos": 1403,
                                "end": 1408,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The index of the child tab (optional).</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "setNavItemsBasedOnRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSet navigation items based on the user's role.\n",
                    "description": "<p>Set navigation items based on the user&#39;s role.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleExpand",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nToggle the expanded state of a tab with children.\n",
                    "description": "<p>Toggle the expanded state of a tab with children.</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 2396,
                                "end": 2401,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "index"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 2390,
                                "end": 2395,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "param"
                            },
                            "comment": "<ul>\n<li>The index of the tab to expand/collapse.</li>\n</ul>\n"
                        }
                    ]
                },
                {
                    "name": "updateActiveTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nUpdate the active tab based on the current route.\n",
                    "description": "<p>Update the active tab based on the current route.</p>\n",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { AuthService } from 'app/Service/auth/auth.service';\r\nimport { filter } from 'rxjs/operators';\r\n\r\ninterface NavItem {\r\n  name: string;\r\n  icon: string;\r\n  route?: string;\r\n  children?: NavItem[];\r\n  expanded?: boolean;\r\n}\r\n\r\n@Component({\r\n  imports: [CommonModule, MatIconModule],\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.css'],\r\n})\r\nexport class SidebarComponent implements OnInit {\r\n  tabs: NavItem[] = [];\r\n  userRole!: string;\r\n  activeIndex = 0; // Tracks the active parent tab\r\n  activeChildIndex: number | null = null; // Tracks the active child tab (null if no child is active)\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) {\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe(() => {\r\n        this.updateActiveTab();\r\n      });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.userRole = this.authService.getRoles();\r\n    this.setNavItemsBasedOnRole(this.userRole);\r\n  }\r\n\r\n  /**\r\n   * Set the active tab (parent or child) and navigate to its route.\r\n   * @param parentIndex - The index of the parent tab.\r\n   * @param childIndex - The index of the child tab (optional).\r\n   */\r\n  setActive(parentIndex: number, childIndex?: number): void {\r\n    const tab = this.tabs[parentIndex];\r\n\r\n    // If a child index is provided, handle child tab activation\r\n    if (childIndex !== undefined && tab.children) {\r\n      this.activeIndex = parentIndex;\r\n      this.activeChildIndex = childIndex;\r\n      const childTab = tab.children[childIndex];\r\n      if (childTab.route) {\r\n        this.router.navigate([childTab.route]);\r\n      }\r\n      tab.expanded = true; // Ensure parent is expanded\r\n      return;\r\n    }\r\n\r\n    // Handle parent tab activation\r\n    this.activeIndex = parentIndex;\r\n    this.activeChildIndex = null; // Reset child index when a parent tab is clicked\r\n\r\n    if (tab.children) {\r\n      this.toggleExpand(parentIndex);\r\n      return;\r\n    }\r\n\r\n    if (tab.route) {\r\n      this.router.navigate([tab.route]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle the expanded state of a tab with children.\r\n   * @param index - The index of the tab to expand/collapse.\r\n   */\r\n  toggleExpand(index: number): void {\r\n    const tab = this.tabs[index];\r\n    if (tab.children) {\r\n      tab.expanded = !tab.expanded;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Expose the number of tabs for CSS calculations.\r\n   */\r\n  get tabCount(): number {\r\n    return this.tabs.length;\r\n  }\r\n\r\n  /**\r\n   * Set navigation items based on the user's role.\r\n   */\r\n  private setNavItemsBasedOnRole(role: string | null): void {\r\n    switch (role) {\r\n      case 'MANAGER':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/staff/dashboard' },\r\n          { name: 'Customers', icon: 'people', route: '/staff/dashboard' },\r\n          {\r\n            name: 'Suppliers',\r\n            icon: 'local_shipping',\r\n            route: '/staff/suppliers',\r\n          },\r\n          {\r\n            name: 'Analytics',\r\n            icon: 'analytics',\r\n            expanded: false,\r\n            children: [\r\n              {\r\n                name: 'Customers',\r\n                icon: 'people',\r\n                route: '/staff/analytics/customers',\r\n              },\r\n              {\r\n                name: 'Suppliers',\r\n                icon: 'local_shipping',\r\n                route: '/staff/analytics/suppliers',\r\n              },\r\n              {\r\n                name: 'Staff',\r\n                icon: 'groups',\r\n                route: '/staff/analytics/staff',\r\n              },\r\n              {\r\n                name: 'Sales',\r\n                icon: 'trending_up',\r\n                route: '/staff/analytics/sales',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: 'Discounts & Coupons',\r\n            icon: 'local_offer',\r\n            route: '/staff/discounts',\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/staff/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      case 'ADMIN':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/admin/dashboard' },\r\n          { name: 'Customers', icon: 'people', route: '/admin/customers' },\r\n          {\r\n            name: 'Loyalty Program',\r\n            icon: 'card_giftcard',\r\n            route: '/admin/loyalty',\r\n          },\r\n          {\r\n            name: 'Coupons Management',\r\n            icon: 'local_offer',\r\n            route: '/admin/coupons',\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/admin/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      case 'STAFF':\r\n        this.tabs = [\r\n          { name: 'Dashboard', icon: 'dashboard', route: '/staff/dashboard' },\r\n          {\r\n            name: 'Inventory',\r\n            icon: 'inventory_2',\r\n            expanded: false,\r\n            children: [\r\n              {\r\n                name: 'Products',\r\n                icon: 'shopping_bag',\r\n                route: '/staff/inventory/products',\r\n              },\r\n              {\r\n                name: 'Category',\r\n                icon: 'category',\r\n                route: '/staff/inventory/category',\r\n              },\r\n              {\r\n                name: 'Brands',\r\n                icon: 'store_mall_directory',\r\n                route: '/staff/inventory/brands',\r\n              },\r\n              {\r\n                name: 'Discounts',\r\n                icon: 'local_offer',\r\n                route: '/staff/inventory/discounts',\r\n              },\r\n              {\r\n                name: 'Expiry',\r\n                icon: 'event_available',\r\n                route: '/staff/inventory/expiry',\r\n              },\r\n              {\r\n                name: 'Low Stock',\r\n                icon: 'inventory_2',\r\n                route: '/staff/inventory/low-stock',\r\n              },\r\n            ],\r\n          },\r\n          {\r\n            name: 'Notifications',\r\n            icon: 'notifications_active',\r\n            route: '/staff/notifications',\r\n          },\r\n          { name: 'Settings', icon: 'settings', route: '/admin/settings' },\r\n        ];\r\n        break;\r\n\r\n      default:\r\n        this.tabs = [];\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the active tab based on the current route.\r\n   */\r\n  private updateActiveTab(): void {\r\n    const currentRoute = this.router.url;\r\n\r\n    this.tabs.forEach((tab, parentIndex) => {\r\n      if (tab.route === currentRoute) {\r\n        this.activeIndex = parentIndex;\r\n        this.activeChildIndex = null;\r\n        return;\r\n      }\r\n      if (tab.children) {\r\n        const childIndex = tab.children.findIndex(\r\n          (child) => child.route === currentRoute,\r\n        );\r\n        if (childIndex !== -1) {\r\n          this.activeIndex = parentIndex;\r\n          this.activeChildIndex = childIndex;\r\n          tab.expanded = true;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Log out the user and navigate to the login page.\r\n   */\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/login'], { replaceUrl: true });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar-wrapper {\r\n  width: 220px; /* Slightly more than label content */\r\n  height: 100vh;\r\n  top: 0;\r\n  left: 0;\r\n  overflow: hidden;\r\n  border-top-right-radius: 20px;\r\n  border-bottom-right-radius: 20px;\r\n  border-right: none;\r\n}\r\n\r\n.nav-tabs {\r\n  position: relative;\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  --tab-count: 6; /* Default value, overridden by the component */\r\n}\r\n/* Icon and text alignment */\r\n.tab-label mat-icon {\r\n  margin-right: 8px;\r\n}\r\n.tab-label {\r\n  margin: 20px 0 10px 0;\r\n  flex: 1; /* Each label takes equal height */\r\n  font-size: 18px;\r\n  font-weight: 700;\r\n  text-align: left;\r\n  color: #000000;\r\n  opacity: 0.5;\r\n  cursor: pointer;\r\n  -webkit-user-select: none; /* Safari support */\r\n  user-select: none;\r\n  transition:\r\n    opacity 0.4s ease-in-out,\r\n    color 0.4s ease-in-out;\r\n  z-index: 2;\r\n  position: relative;\r\n  padding: 0 10px; /* Some horizontal padding */\r\n  box-sizing: border-box; /* Prevent overflow */\r\n}\r\n\r\n.marker {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 200%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  top: calc(-100%);\r\n  left: 0;\r\n  transition: transform 0.2s ease-in-out;\r\n  transform: translateY(\r\n    calc(calc(50% / var(--tab-count)) * var(--active-index))\r\n  );\r\n  z-index: 1; /* Lower than .tab-label */\r\n}\r\n\r\n.tab-label.active {\r\n  opacity: 1;\r\n  color: var(--gray-900);\r\n}\r\n\r\n.marker #top,\r\n.marker #bottom {\r\n  background-color: #dfe6ed;\r\n  /* box-shadow: 32px 32px 48px #2e364315; */\r\n}\r\n\r\n.marker #top {\r\n  height: calc(50%);\r\n  margin-bottom: auto;\r\n  border-radius: 0 0 32px 0;\r\n}\r\n\r\n.marker #bottom {\r\n  height: calc(50% - 72px);\r\n  border-radius: 0 32px 0 0;\r\n}\r\n.tab-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  overflow-x: hidden; /* Prevent horizontal scroll */\r\n  overflow-y: auto; /* Still allows vertical scrolling if needed */\r\n  transition: justify-content 0.3s ease;\r\n}\r\n\r\n.center-tabs {\r\n  justify-content: center; /* Vertically center tabs */\r\n}\r\n/* Expand icon */\r\n.expand-icon {\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.expand-icon.expanded {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n/* Child tab container */\r\n.children-container {\r\n  margin-left: 20px; /* Indent child tabs */\r\n  padding-top: 5px;\r\n}\r\n\r\n/* Child tab styling */\r\n.child-tab {\r\n  cursor: pointer;\r\n  padding: 8px 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  color: #333;\r\n  font-size: 12px; /* Smaller font size for child tabs */\r\n  transition: background-color 0.3s ease;\r\n  height: 32px; /* Fixed height for child tabs */\r\n}\r\n\r\n.child-tab:hover {\r\n  background-color: #d3d9de; /* Highlight on hover */\r\n}\r\n\r\n.child-tab.active {\r\n  background-color: #d3d9de; /* Highlight active child tab */\r\n}\r\n\r\n.child-tab mat-icon {\r\n  margin-right: 8px;\r\n}\r\n",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "tabCount": {
                    "name": "tabCount",
                    "getSignature": {
                        "name": "tabCount",
                        "type": "number",
                        "returnType": "number",
                        "line": 92,
                        "rawdescription": "\n\nExpose the number of tabs for CSS calculations.\n",
                        "description": "<p>Expose the number of tabs for CSS calculations.</p>\n"
                    }
                }
            },
            "templateData": "<div class=\"sidebar-wrapper\">\r\n  <div class=\"nav-tabs\" [style.--tab-count]=\"tabCount\">\r\n    <div class=\"tab-list\" [ngClass]=\"{ 'center-tabs': tabCount <= 3 }\">\r\n      <!-- Loop through each tab -->\r\n      <div\r\n        *ngFor=\"let tab of tabs; let i = index\"\r\n        class=\"tab-label\"\r\n        [class.active]=\"activeIndex === i && activeChildIndex === null\"\r\n        (click)=\"setActive(i)\"\r\n      >\r\n        <mat-icon>{{ tab.icon }}</mat-icon>\r\n        <span class=\"menu-text\">{{ tab.name.toUpperCase() }}</span>\r\n        <mat-icon\r\n          *ngIf=\"tab.children\"\r\n          class=\"expand-icon\"\r\n          [class.expanded]=\"tab.expanded\"\r\n          (click)=\"toggleExpand(i)\"\r\n        >\r\n          {{ tab.expanded ? \"keyboard_arrow_up\" : \"keyboard_arrow_down\" }}\r\n        </mat-icon>\r\n\r\n        <!-- Display children when expanded -->\r\n        <div *ngIf=\"tab.children && tab.expanded\" class=\"children-container\">\r\n          <div\r\n            *ngFor=\"let child of tab.children; let j = index\"\r\n            class=\"child-tab\"\r\n            [class.active]=\"activeIndex === i && activeChildIndex === j\"\r\n            (click)=\"setActive(i, j)\"\r\n          >\r\n            <mat-icon>{{ child.icon }}</mat-icon>\r\n            <span class=\"menu-text\">{{ child.name.toUpperCase() }}</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Active tab marker -->\r\n    <div\r\n      class=\"marker\"\r\n      [style.--active-index]=\"activeIndex\"\r\n      [style.--active-child-index]=\"\r\n        activeChildIndex !== null ? activeChildIndex : -1\r\n      \"\r\n    >\r\n      <div id=\"top\"></div>\r\n      <div id=\"bottom\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "SkeletonLoaderComponent",
            "id": "component-SkeletonLoaderComponent-64c39ce903dddb9c13e0c6aceca107465d2d0ec1c93d74f91c0b5a80e182f694affa4af04d2b351c9dc090d44199ef4b98880a457209586346b9a16371ad8598",
            "file": "src/app/Common/components/skeleton-loader/skeleton-loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-skeleton-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./skeleton-loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'table'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "\"table\" | \"card\" | \"list\"",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-skeleton-loader',\r\n  imports: [CommonModule],\r\n  templateUrl: './skeleton-loader.component.html',\r\n  styleUrl: './skeleton-loader.component.css',\r\n})\r\nexport class SkeletonLoaderComponent {\r\n  @Input() type: 'table' | 'card' | 'list' = 'table'; // Define different skeleton types\r\n  @Input() rows: number = 5; // Number of rows for table/list\r\n  @Input() columns: number = 5; // Number of columns for table\r\n  @Input() width: string = '100%'; // Custom width\r\n  @Input() height: string = 'auto'; // Custom height\r\n\r\n  get skeletonRows(): number[] {\r\n    return Array(this.rows).fill(0);\r\n  }\r\n\r\n  get skeletonColumns(): number[] {\r\n    return Array(this.columns).fill(0);\r\n  }\r\n}\r\n",
            "styleUrl": "./skeleton-loader.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "skeletonRows": {
                    "name": "skeletonRows",
                    "getSignature": {
                        "name": "skeletonRows",
                        "type": "[]",
                        "returnType": "number[]",
                        "line": 17
                    }
                },
                "skeletonColumns": {
                    "name": "skeletonColumns",
                    "getSignature": {
                        "name": "skeletonColumns",
                        "type": "[]",
                        "returnType": "number[]",
                        "line": 21
                    }
                }
            },
            "templateData": "<div\r\n  class=\"skeleton-container\"\r\n  [ngSwitch]=\"type\"\r\n  [style.width]=\"width\"\r\n  [style.height]=\"height\"\r\n>\r\n  <!-- Table Skeleton -->\r\n  <ng-container *ngSwitchCase=\"'table'\">\r\n    <div class=\"skeleton-table\">\r\n      <div class=\"skeleton-row header\">\r\n        <div class=\"skeleton-cell\" *ngFor=\"let _ of skeletonColumns\"></div>\r\n      </div>\r\n      <div class=\"skeleton-row\" *ngFor=\"let _ of skeletonRows\">\r\n        <div class=\"skeleton-cell\" *ngFor=\"let _ of skeletonColumns\"></div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <!-- Card Skeleton -->\r\n  <ng-container *ngSwitchCase=\"'card'\">\r\n    <div class=\"skeleton-card\">\r\n      <div class=\"skeleton-image\"></div>\r\n      <div class=\"skeleton-text long\"></div>\r\n      <div class=\"skeleton-text medium\"></div>\r\n      <div class=\"skeleton-text short\"></div>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <!-- List Skeleton -->\r\n  <ng-container *ngSwitchCase=\"'list'\">\r\n    <div class=\"skeleton-list\">\r\n      <div class=\"skeleton-list-item\" *ngFor=\"let _ of skeletonRows\">\r\n        <div class=\"skeleton-text long\"></div>\r\n        <div class=\"skeleton-text short\"></div>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "SupplierComponent",
            "id": "component-SupplierComponent-903b34c8c59873e8b1829a9f05f5cecc3b8cdaa2f951c31054a372d89bb9c2ef7d853671362aaed19a136e65c269dbd3a6563aa362cb79d240854680d5be7087",
            "file": "src/app/staff/Components/management/supplier/supplier.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-supplier",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./supplier.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-supplier',\r\n  imports: [],\r\n  templateUrl: './supplier.component.html',\r\n  styleUrl: './supplier.component.css'\r\n})\r\nexport class SupplierComponent {\r\n\r\n}\r\n",
            "styleUrl": "./supplier.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>supplier works!</p>\r\n"
        },
        {
            "name": "VoucherComponent",
            "id": "component-VoucherComponent-b737df55bdc3ad5ce4786619e46f3e48088590fb70108f46f902b6e6a0fe20af4c93679aa45299d5084ced6b271d9632be7e82a270a87fdbbe0d23f0fb105d4c",
            "file": "src/app/customer/Components/Purchase/voucher/voucher/voucher.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-voucher",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./voucher.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkoutData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "CheckoutData",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "pdfUrl",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "downloadVoucher",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "generateVoucher",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { CheckoutData } from 'app/customer/Model/checkOut';\r\nimport { PdfService } from 'app/Service/pdf/pdf.service';\r\n\r\n@Component({\r\n  selector: 'app-voucher',\r\n  imports: [CommonModule],\r\n  templateUrl: './voucher.component.html',\r\n  styleUrl: './voucher.component.css',\r\n})\r\nexport class VoucherComponent {\r\n  @Input() checkoutData!: CheckoutData; // Required input\r\n  pdfUrl: string | null = null;\r\n\r\n  constructor(private pdfService: PdfService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.generateVoucher();\r\n  }\r\n\r\n  generateVoucher(): void {\r\n    if (this.checkoutData) {\r\n      const pdf = this.pdfService.generateVoucherPdf(this.checkoutData);\r\n      pdf.getDataUrl((dataUrl: string) => {\r\n        this.pdfUrl = dataUrl;\r\n      });\r\n    }\r\n  }\r\n\r\n  downloadVoucher(): void {\r\n    if (this.checkoutData) {\r\n      this.pdfService\r\n        .generateVoucherPdf(this.checkoutData)\r\n        .download('voucher.pdf');\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./voucher.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "pdfService",
                        "type": "PdfService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "pdfService",
                        "type": "PdfService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"voucher-container\">\r\n  <div class=\"voucher-preview\" *ngIf=\"pdfUrl\">\r\n    <h3>Your Voucher</h3>\r\n    <iframe [src]=\"pdfUrl\" width=\"100%\" height=\"400px\"></iframe>\r\n    <div class=\"action-buttons\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"downloadVoucher()\">\r\n        Download Voucher\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div *ngIf=\"!pdfUrl\">\r\n    <p>Loading voucher...</p>\r\n  </div>\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes, withHashLocation()), // Enable Hash-Based Routing ✅\r\n    provideAnimationsAsync(),\r\n    provideToastr(),\r\n    provideHttpClient(withInterceptors([authInterceptor])),\r\n    CookieService,\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  return true;\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn,\r\n): Observable<HttpEvent<unknown>> => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n  const toastService = inject(ToastService);\r\n\r\n  const publicEndpoints = [\r\n    '/user/login',\r\n    '/user/signup',\r\n    '/product/search/',\r\n    '/purchase/payment',\r\n  ];\r\n\r\n  if (publicEndpoints.some((endpoint) => req.url.includes(endpoint))) {\r\n    return next(req);\r\n  }\r\n\r\n  const token = authService.getToken();\r\n  if (token) {\r\n    req = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error) => {\r\n      if (error.status === 401 && token) {\r\n        console.warn(`401 for ${req.url}. Token: ${token.substring(0, 10)}...`);\r\n        if (isTokenExpired(token)) {\r\n          console.error('Token expired. Logging out...');\r\n          toastService.showError('Token expired. Logging out...');\r\n          authService.logout();\r\n          router.navigate(['/login'], { queryParams: { returnUrl: req.url } });\r\n        } else {\r\n          console.log('Token valid; server rejected request. Not logging out.');\r\n          toastService.showWarning(\r\n            'Token valid; server rejected request. Not logging out.',\r\n          );\r\n        }\r\n      }\r\n      return throwError(() => error);\r\n    }),\r\n  );\r\n}"
            },
            {
                "name": "roleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/guards/role/role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService); // Inject AuthService\r\n  const router = inject(Router); // Inject Router\r\n\r\n  const requiredRoles = route.data?.['role'] ?? []; // Roles required for this route\r\n  const userRole: string = authService.getRoles(); // Now returns a single string\r\n  const hasRole =\r\n    requiredRoles.length === 0 || requiredRoles.includes(userRole);\r\n\r\n  if (!hasRole) {\r\n    console.error('Unauthorized access. Redirecting...');\r\n    router.navigate(['/unauthorized']); // Redirect to unauthorized page\r\n    return false;\r\n  }\r\n  console.log('User Roles (processed):', userRole);\r\n  console.log('Required Roles (processed):', requiredRoles);\r\n  console.log('Has Role:', hasRole);\r\n\r\n  return true; // Allow access to the route\r\n}"
            },
            {
                "name": "routing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "provideRouter(routes)"
            }
        ],
        "functions": [
            {
                "name": "decodeToken",
                "file": "src/app/utils/jwt.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isTokenExpired",
                "file": "src/app/utils/jwt.utils.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes, withHashLocation()), // Enable Hash-Based Routing ✅\r\n    provideAnimationsAsync(),\r\n    provideToastr(),\r\n    provideHttpClient(withInterceptors([authInterceptor])),\r\n    CookieService,\r\n  ],\r\n}"
                }
            ],
            "src/app/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  return true;\r\n}"
                }
            ],
            "src/app/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn,\r\n): Observable<HttpEvent<unknown>> => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n  const toastService = inject(ToastService);\r\n\r\n  const publicEndpoints = [\r\n    '/user/login',\r\n    '/user/signup',\r\n    '/product/search/',\r\n    '/purchase/payment',\r\n  ];\r\n\r\n  if (publicEndpoints.some((endpoint) => req.url.includes(endpoint))) {\r\n    return next(req);\r\n  }\r\n\r\n  const token = authService.getToken();\r\n  if (token) {\r\n    req = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${token}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error) => {\r\n      if (error.status === 401 && token) {\r\n        console.warn(`401 for ${req.url}. Token: ${token.substring(0, 10)}...`);\r\n        if (isTokenExpired(token)) {\r\n          console.error('Token expired. Logging out...');\r\n          toastService.showError('Token expired. Logging out...');\r\n          authService.logout();\r\n          router.navigate(['/login'], { queryParams: { returnUrl: req.url } });\r\n        } else {\r\n          console.log('Token valid; server rejected request. Not logging out.');\r\n          toastService.showWarning(\r\n            'Token valid; server rejected request. Not logging out.',\r\n          );\r\n        }\r\n      }\r\n      return throwError(() => error);\r\n    }),\r\n  );\r\n}"
                }
            ],
            "src/app/guards/role/role.guard.ts": [
                {
                    "name": "roleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/guards/role/role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService); // Inject AuthService\r\n  const router = inject(Router); // Inject Router\r\n\r\n  const requiredRoles = route.data?.['role'] ?? []; // Roles required for this route\r\n  const userRole: string = authService.getRoles(); // Now returns a single string\r\n  const hasRole =\r\n    requiredRoles.length === 0 || requiredRoles.includes(userRole);\r\n\r\n  if (!hasRole) {\r\n    console.error('Unauthorized access. Redirecting...');\r\n    router.navigate(['/unauthorized']); // Redirect to unauthorized page\r\n    return false;\r\n  }\r\n  console.log('User Roles (processed):', userRole);\r\n  console.log('Required Roles (processed):', requiredRoles);\r\n  console.log('Has Role:', hasRole);\r\n\r\n  return true; // Allow access to the route\r\n}"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "provideRouter(routes)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/utils/jwt.utils.ts": [
                {
                    "name": "decodeToken",
                    "file": "src/app/utils/jwt.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isTokenExpired",
                    "file": "src/app/utils/jwt.utils.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/Common/components/skeleton-loader/skeleton-loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SkeletonLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/Common/dialog/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/Common/quantity-selector/quantity-selector.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "QuantitySelectorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/Service/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/Service/main.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MainService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/Service/pdf/pdf.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "PdfService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/Service/toast/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/Purchase/cart/cart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/Purchase/check-out/check-out.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/Purchase/paypal/paypal-return/paypal-return.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaypalReturnComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/Purchase/voucher/voucher/voucher.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "VoucherComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/bannerComponent/banner/banner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/login-modal/login-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/otp-verficiation/otp-verficiation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "OtpVerificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/product/barcode-scanner/barcode-scanner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BarcodeScannerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/product/product-detail/product-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Components/register-modal/register-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterModalComponent",
                "coveragePercent": 23,
                "coverageCount": "3/13",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/cart/cart-item-display.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItemDisplay",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/cart/cart-items.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItems",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/checkOut.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CartItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/checkOut.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckoutData",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/discount.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Discount",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/Model/login.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/cartService/cart.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CartService",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/checkoutService/checkout.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CheckoutService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/checkoutService/checkout.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CancelResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/checkoutService/checkout.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckoutResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/customer/apiService/productService/product.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/role/role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/login.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/staff/Components/LoginPanel/login-panel/login-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/staff/Components/admin-layouts/admin-layouts.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdminLayoutsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/staff/Components/dashboard/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/staff/Components/management/supplier/supplier.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SupplierComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/staff/Components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 41,
                "coverageCount": "5/12",
                "status": "medium"
            },
            {
                "filePath": "src/app/staff/Components/sidebar/sidebar.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavItem",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/jwt.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "decodeToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/jwt.utils.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isTokenExpired",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}